// ==Jsx==
// @compress off
// ==/Jsx==

var node = (function (){
	var e = null;

	function s (s) return ' ' + s.match (/[^\s]+|$/g).join (' ');
	function h (c) return s (e.className).indexOf (s (c)) != -1;
	function a (c) return !h (c) && (e.className = e.className.match (/[^\s]+|$/g).join (' ') + c);
	function r (c) e.className = s (e.className).replace (c, '').match (/[^\s]+/g).join (' ');
	function t (c) if (!a (c)) r (c);
	function m ( ) while (e.firstChild) e.removeChild (e.firstChild);

	function node (tag, className, content, attributes)
		if (typeof tag != 'string'){
			e = tag;
			return node;
		} else {
			var temp = document.createElement (tag);

			if (className) 
				temp.className = className;

			if (content){
				if (content.push){
					for (var i = 0; i < content.length; i ++)
						if (typeof content [i] === 'string')
							temp.appendChild (document.createTextNode (content [i]));
						else if (content [i])
							temp.appendChild (content [i]);
				} else if (/[<>]/.test (content)){
					temp.innerHTML = content;
				} else
					temp.appendChild (document.createTextNode (content)); 
			}

			if (attributes)
				for (var n, v in attributes)
					if (v)
						temp.setAttribute (n.replace (/([a-z])([A-Z])/g, lambda (m, $1, $2) $1 + '-' + $2.toLowerCase ()), v);

			return temp;
		}

	node.hasClass    = h;
	node.addClass    = lambda { a (arg);  return node };
	node.removeClass = lambda { r (arg);  return node };
	node.toggleClass = lambda { t (arg);  return node };
	node.empty       = lambda { m ();     return node };
	node.end         = lambda { e = null; return node };
	node.get         = lambda e;

	return node;
})();
