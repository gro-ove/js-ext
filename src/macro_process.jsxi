	var anonymousMacroId = +new Date;

	function macrosParse (source, level, context){
		console.assert (context instanceof Context, 'Context required');

		function throwError (message){
			// TODO
			throw new Error ([ 'MacroParseError', context.file.filename, liteParser.lineNumber, message ]);
		}

		function parseMacroDefine (){
			var name = found.raw [1],
				splitted = name.split (':'),
				position,
				argument,
				arguments,
				blockMode,
				temp,
				body,
				converted,
				insertCall = false,
				from;

			if (splitted [0] === 'macro')
				throwError ('Unexpected reserved word');

			temp = liteParser.whatNext (/[^\s]/);
			from = liteParser.index;

			if (temp.value === '('){
				liteParser.moveTo (temp);

				position 	= liteParser.index;
				arguments 	= [];

				while (temp = liteParser.findHere (',', ')')){
					argument = liteParser.substring (position, liteParser.index - 1).trim ();

					if (argument.length){
						arguments.push (argument);

						if (!/^[a-z$_][a-z$_\d]*(\:[a-z\-]+)?$/i.test (argument)){
							arguments = null;
							liteParser.index = from;
							break;
						}
					} else if (arguments.length || temp.value === ',')
						throwError ('Unexpected token ' + temp.value);

					position = liteParser.index;

					if (temp.value === ')')
						break;
				}

				if (!temp)
					throwError ('Unexpected end of file');

				temp = liteParser.whatNext (/[^\s]/);
			} else 
				arguments = null;

			blockMode = temp && temp.value === '{';
			position = liteParser.index;

			if (blockMode){
				liteParser.moveTo (temp);
				temp = liteParser.findHere ('}');
			} else 
				temp = liteParser.findHere (';', LiteParser.EOF);

			if (!temp || temp.value === LiteParser.EOF){
				throwError ('Unexpected end of file');
			} else if (temp.value === '}'){
				temp = liteParser.whatNext (/[^\s]/);
				if (temp && temp.value === '(')
					insertCall = true;
			}

			body = liteParser.substring (position, liteParser.index).trim ();

			temp = liteParser.whatNext (/[^\s]/);
			if (temp && temp.value === ';')
				liteParser.moveTo (temp);

			if (!splitted [0])
				insertCall = true;

			if (insertCall){
				name = '__anonymous_macro_' + ++ anonymousMacroId;
				liteParser.replace (found.index, liteParser.index, '@' + name);
				liteParser.index = found.index;

				if (splitted [1])
					name += ':' + splitted [1];
			} else
				liteParser.replace (found.index, liteParser.index, '/* There was definition of @' + name + ' */');

			var macro = new Macro (name, level, context, arguments, body);
			macroStorage.add (macro);
		}

		function parseMacroCall (){
			var name 		= found.raw [1],
				arguments 	= [],
				position,
				argument,
				quotesCount,
				temp;

			if (name === 'macro')
				throwError ('Unexpected reserved word');

			temp = liteParser.whatNext (/[^\s]/);
			if (temp && (temp.value === '{' || temp.value === '(') && liteParser.lineNumberAt (temp.index) === liteParser.lineNumber){
				liteParser.moveTo (temp);

				if (temp.value === '{'){
					quotesCount = 1;

					while (liteParser.current === '{'){
						liteParser.index ++;
						quotesCount ++;
					}

					position = liteParser.index;

					if (quotesCount > 1)
						temp = liteParser.findSimple (new Array (quotesCount + 1).join ('}'));
					else 
						temp = liteParser.findHere ([ '{' ], '}');

					if (!temp)
						throwError ('Unexpected end of file');

					argument = liteParser.substring (position, liteParser.index - 1);
					arguments.push (argument);
				} else {
					position = liteParser.index;

					while (temp = liteParser.findHere (',', ')')){
						argument = liteParser.substring (position, liteParser.index - 1).trim ();

						if (argument.length)
							arguments.push (argument);
						else if (arguments.length || temp.value === ',')
							throwError ('Unexpected token ' + temp.value);

						if (temp.value === ')')
							break;
						else
							position = liteParser.index;
					}

					if (!temp)
						throwError ('Unexpected end of file');
				}
			}

			var replacement = '@__call(' + calls.length + ')';
			
			calls.push (new MacroCall (name, arguments, level, context, replacement));
			liteParser.replace (found.index, liteParser.index, replacement);
		}

		function levelDown ()
			level += '.' + context.id + '_' + found.index;

		function levelUp ()
			level = level.replace (/\.[\d_]+$/, '');

		var calls 		= [],
			liteParser 	= new LiteParser (source)
				// .debug ()
				.on ('//', lambda this.findSimple ('\n', '\r', LiteParser.EOF), 'comment') 
				.on ('/*', lambda this.findSimple ('*/'), 'multiline comment')
				.on ('\'', '"', '`', lambda {
					var from = liteParser.index;
					for (var temp; temp = liteParser.findSimple ('\\' + arg.value, arg.value); )
						if (temp.value === arg.value)
							return true;
					return false;
				}, 'string')
				.on (/(^|function|lambda|return|[=,\(\[\{\:;])\s*\/[^\/\*]/,  lambda {
					for (var temp; temp = liteParser.findSimple ('\\\\', '\\/', '/'); )
						if (temp.value === '/')
							return true;
					return false;
				}, function regExp (from, to, found) return this.data.substring (from - 1, to - 1)),
			found;

		while (found = liteParser.findNext (
				/@macro\s+((?:[_$a-zA-Z][_$a-zA-Z0-9\.\-]*)?(?:\:[a-z\-]+)?)/, 
				/@([_$a-zA-Z][_$a-zA-Z0-9\.\-]*)/, 
				'{', 
				'}')){
			switch (found.id){
				case 0:
					parseMacroDefine ();
					break;
				case 1:
					parseMacroCall ();
					break;
				case 2:
					levelDown ();
					break;
				case 3:
					levelUp ();
					break;
			}
		}

		return {
			data: 		liteParser.data,
			calls: 		calls
		}
	}

	function macrosProcess (data, level, context, callback){
		if (level instanceof Context){
			callback 	= context;
			context 	= level;
			level 		= '';
		}

		console.assert (context instanceof Context, 'Context required');
		console.assert (typeof callback === 'function', 'Function required');

		var temp 	= macrosParse (data, level, context),
			queue 	= new Queue (Queue.MODE_PARALLEL).description ('macros process');

		for (var call in-array temp.calls)
			queue.add (call, call.process.bind (call));

		queue.run (lambda {
			for (var entry in-array arg)
				temp.data = temp.data.split (entry.data.replacement).join (entry.result [0]);
			callback (temp.data);
		});
	}
