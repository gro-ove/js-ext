process.on ('uncaughtException', function (error){
	console.fatal (error && error.stack ? error.stack : String (error));
});

console.fatal = function (){
	console.log ('\n    [ FATAL ERROR ]\n');
	console.log.apply (console, arguments);
	console.log ('');
	console.log = lambda;
	setTimeout (lambda process.exit (1), 500);
};

console.json = function (obj){
	console.log (JSON.stringify (obj, false, 2));
};

function convert (jsxCode, options){
	var parsed;

	if (typeof jsxCode === 'string'){
		try {
			parsed = jsxParse (jsxCode, options);
		} catch 
			console.fatal ('Parsing failed (' + options.filename + ')' 
				+ ('\n' + jsxCode.trim ()).replace (/\n/g, '\n> ') + '\n\n'
				+ e.stack);
	} else
		parsed = jsxCode;

	try {
		return require ('escodegen').generate (parsed);
	} catch 
		console.fatal ('Generating failed (' + options.filename + ')' 
			+ e.stack);
}

var previousT = (lambda arg [0] * 1e9 + arg [1])(process.hrtime ());

function addLog (p, key, fn){
	if (!p || !p.prototype){
		fn 		= key;
		key 	= p;
		p 		= null;
	}

	if (typeof key === 'number')
		key = new Array (key + 1).join ('  ');
	else
		key = key + 1;

	function tstr (n){
		var s = String (n / 1e9 | 0),
			ms = String ((n % 1e9) / 1e6 | 0);

		while (s.length < 2)
			s = '0' + s;

		while (ms.length < 3)
			ms = '0' + ms;

		return '[' + s + '.' + ms + ']';
	}

	var size = 32,
		r = lambda {
			var f = [ key + (typeof fn === 'function' ? fn.call (this) : fn) + ':' ],
				h = process.hrtime (),
				t = h [0] * 1e9 + h [1];

			if (f [0].length > size)
				f [0] = f [0].substr (0, size - 4) + '...:';
			f [0] += new Array (1 + size - f [0].length).join (' ');
			f.push.apply (f, arguments);

			f = [ tstr (t - previousT) ].concat (f);

			// console.log.apply (console, f);
		};

	return p ? (p.prototype.log = r) : r;
}

function isEmpty (obj){
	for (var n in obj)
		return false;
	return true;
}

var $ = { 
	extend: (function (){
		// Taken from Zepto

		function extend (target, source, deep)
			for (var key, value in source)
				if (deep && (typeof value === 'object' || value instanceof Array)){
					if (value instanceof Array && !(target [key] instanceof Array))
						target [key] = [];
					else if (typeof value === 'object' && typeof target [key] !== 'object')
						target [key] = {};

					extend (target [key], value, deep);
				} else if (value !== undefined) 
					target [key] = value;

		return function (target){
			var deep, 
				args = Array.prototype.slice.call (arguments, 1);

			if (typeof target == 'boolean'){
				deep = target;
				target = args.shift ();
			}

			args.forEach (lambda extend (target, arg, deep));
			return target;
		}
	})() 
};