console.fatal = function (code){
	console.error.apply (console, Array.prototype.slice.call (arguments, typeof code === 'number' ? 1 : 0));
	process.exit (typeof code === 'number' ? code : 0);
};

console.json = function (obj){
	console.log (JSON.stringify (obj, false, 2));
};

function convert (jsxCode, options)
	try {
		return require ('escodegen').generate (typeof jsxCode === 'string' ? jsxParse (jsxCode, typeof options === 'string' ? { filename: options } : options) : jsxCode);
	} catch {
		console.log ('ERROR AT PARSING:\n' + jsxCode);
		throw e
	}

function addLog (p, key, fn){
	var size = 25;

	p.prototype.log = lambda {
		var f = [ key + ' ' + (typeof fn === 'function' ? fn.call (this) : fn) + ':' ];
		if (f [0].length > size)
			f [0] = f [0].substr (0, size - 4) + '...:';
		while (f [0].length < size)
			f [0] += ' ';
		f.push.apply (f, arguments);

		console.log.apply (console, f);
	};
}

