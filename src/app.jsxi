module App {
	import Node, Prework, Parser, Converter, Format, Compressor, ModulesCode, Cacher;
	
	export var inputFile,
		outputFile,
		cacheFolder,
		argPhpHeader,
		includesFolders,
		debugFolder,
		silenceMode;
		
	var loadedFiles = [],
		glob        = Node.safeAccess ('glob', 'usings masks'),
		fibers      = Node.safeAccess ('fibers');
		
	function asFolder (path){
		if (!path)
			return null;
		
		var folder = Node.path ().resolve (path);
		try Node.fs ().mkdirSync (folder);
		return Node.fs ().existsSync (folder) ? folder : null;
	}
	
	function checkOn (value){
		if (/^(on|true|1|yes|enabled?)$/i.test (value))
			return true;
		if (/^(off|false|0|no|disabled?)$/i.test (value))
			return false;
		Node.fatalError ('Wrong parameter value: "{0}".'.format (value));
	}
			
	function join (a, b){
		function pairCompare (a, b, c, d)
			return a == c && b == d || a == d && b == c;
			
		var joiners = {
			target:	lambda (a, b){
					var av = a.value, bv = b.value;
					if (av == bv)
						return a;
					if (pairCompare (av, bv, 'web', 'web:onload'))
						return { type: 'target', value: 'web:onload' };
					if (pairCompare (av, bv, 'web', 'local'))
						return { type: 'target', value: 'local' };
					Node.fatalError ('Incompatibile target: "{0}" and "{1}".'.format (av, bv));
				},
			buildTo: lambda Node.fatalError ('Only one build-target instruction allowed.')
		};
			
		if ((a !== undefined || b !== undefined) && typeof a !== 'function')
			if (a === undefined){
				return b;
			} else if (b === undefined){
				return a;
			} else if (typeof a === 'boolean'){
				return a || b
			} else if (typeof a === 'number'){
				return a + b
			} else if (typeof a.concat === 'function' && typeof a.push === 'function'){
				return a.concat (b);
			} else if (joiners [a.type]){
				return joiners [a.type](b, a);
			} else if (typeof a.substr === 'function'){
				return b + '\n' + a;
			} else if (typeof a === 'object'){
				for (var n in a)
					a [n] = join (a [n], b [n]);
				for (var n in b)
					if (a [n] === undefined)
						a [n] = join (a [n], b [n]);
				return a;
			} else
				Node.fatalError ('Not implemented: "{0}".'.format (typeof a))
	}
	
	function work (file, top){
		silenceMode || console.log (file);
		var content   = Node.readFile (file);
		silenceMode || console.log ('.. Readed');
		var prework   = Prework.work (content);
		silenceMode || console.log ('.. Preworked');
		var parsed    = Parser.work (prework.code, file);
		silenceMode || console.log ('.. Parsed');
		var converted = Converter.work (parsed);
		silenceMode || console.log ('.. Converted');
		var formatted = Format.work (converted.tree);
		silenceMode || console.log ('.. Formatted');
			
		var childs = [],
			result = {
					code:       formatted.code,
					additional: formatted.additional,
					modules:    converted.modules,
					lessParams: converted.lessParams,
					hypParams:  converted.hypParams,
				},
			compress = true;
			
		if (prework.node)
			result.additional.target = { type: 'target', value: 'node' };
		
		for (var i = 0; i < formatted.jsx.length; i ++){
			var key = formatted.jsx [i].key,
				value = formatted.jsx [i].value;
				
			if (key === null){
				if (!silenceMode)
					console.log ('Warning: found unparcable Jsx comment ({0}).'.format (file));
				continue;
			}
			
			switch (key){
				case 'import':
					childs.push ({ name: value + (/(\/|\\)$/.test (value) ? '*' : '') + '.jsxi' });
					break;
				case 'include':
					childs.push ({ name: value + (/(\/|\\)$/.test (value) ? '*' : ''), raw: true });
					break;
				case 'compress':
					compress = checkOn (value);
					break;
				case 'isolate':
					result.additional.isolate = checkOn (value);
					break;
				case 'modules-public':
					result.additional.modulesPublic = checkOn (value);
					break;
				case 'target':
					var n = ['default', 'auto', 'node', 'web', 'web:onload', 'local'].indexOf (value);
					if (n == -1)
						Node.fatalError ('Undefined target value: "{0}" (at {1}).'.format (value, file));
					if (n > 1)
						result.additional.target = { type: 'target', value: value };
					break;
				case 'build-to':
					result.additional.buildTo = { type: 'buildTo', value: value };
					break;
				case 'define':
					if (!result.additional.defines)
						result.additional.defines = [];
					
					var matched = value.match (/^([^\s]+)\s+([\s\S]+)$/);
					if (!matched)
						Node.fatalError ('Wrong define value: "{0}" (at {1}).'.format (value, file));
					result.additional.defines.push ({ what: matched [1].trim (), by: matched [2].trim () });
					break;
				default:
					Node.fatalError ('Undefined instruction: "{0}" (at {1}).'.format (key, file));
			}
		}
		
		if (compress)
			result.code = Compressor.work (result.code, file);
			
		return { result: result, childs: childs };
	}
	
	function findIncluded (name, current, top = current){
		var temp;

		function check (p, t = top){
			var path = Node.path ().resolve (p, name);
			if (path.indexOf ('*') !== -1){
				var result = [];
				glob ().sync (path).forEach (lambda result.push ({ file: arg, top: t }));
				if (result.length)
					return temp = result;
			} else if (Node.fs ().existsSync (path))
				return temp = [{ file: path, top: t }];
		}

		if (check (current))
			return temp;

		while (current.length > top.length && current.indexOf (top) == 0){
			var up = Node.path ().dirname (current);
			if (up == current)
				break;
			if (check (current = up))
				return temp;
		}

		for (var f in-array includesFolders)
			if (check (f, f))
				return temp;

		return null;
	}
	
	function load (file, top, options = {}){		
		if (!Node.fs ().existsSync (file))
			Node.fatalError ('Divided by zero.');
		
		if (options.raw)
			return { code: Node.readFile (file) };
		
		var data = Cacher.load (file);
		if (!data){
			data = work (file, top);
			Cacher.save (file, data);
		}
		
		var childs = [];
		data.childs.forEach (lambda {
			var other = findIncluded (arg.name, Node.path ().dirname (file), top);
			if (!other)
				Node.fatalError ('Couldn\'n found included file: "{0}" ({1}).'.format (arg.name, file));
			for (var i = 0; i < other.length; i ++)
				if (loadedFiles.indexOf (other [i].file) == -1){
					loadedFiles.push (other [i].file);
					childs.push (load (other [i].file, other [i].top, { raw: arg.raw }));
				}
		});
		for (var i = childs.length - 1; i >= 0; i --)
			data.result = join (data.result, childs [i]);
			
		return data.result;
	}
	
	function getOutputFile (file, buildTo, phpMode){
		var result = Node.path ().resolve (file, '..');
		if (buildTo)
			result = Node.path ().resolve (result, buildTo);
		if (!buildTo || /[\/\\]$/.test (buildTo))
			result = Node.path ().resolve (result, Node.path ().basename (file, '.jsx') + (phpMode ? '.php' : '.js'));
		return result;
	}
	
	function finalStrokes (data){
		var result = [], modules = data.modules && ModulesCode.get (data.additional);
		
		if (data.additional.target && data.additional.target.value == 'node')
			result.push ('#!/usr/bin/env node');
		
		if (data.additional.php && argPhpHeader){
			result.push ('<? header(\'Content-Type: application/javascript\') ?>');
			if (!silenceMode)
				console.log ('PHP mode.')
		}
		
		if (data.additional.userscript)
			result.push ('// ==UserScript==\n' + data.additional.userscript.map (lambda '// @' + arg.key + ' ' 
				+ arg.value + '\n').join ('') + '// ==/UserScript==\n');
		
		if (data.additional.isolate)
			result.push ('(function (){\n');
				
		if (modules)
			result.push (modules.begin);
		
		if (data.lessParams)
			result.push (`String.prototype.less=function (a,r){r=this;for(var n in a)r=r.replace(new RegExp('@'+n.replace(/([a-z])([A-Z])/g,'$1_$2').toUpperCase()+'([^A-Z0-9_])','g'),a[n]+'$1');return r}`);
		
		result.push (data.code);
		
		if (modules)
			result.push (modules.end);
			
		if (data.additional.isolate)
			result.push ('\n})()');
		
		var code = result.join ('\n');

		if (data.additional.defines)
			for (i, v in data.additional.defines)
				code = code.split (v.what).join (v.by);
		
		return {
			file: outputFile || getOutputFile (inputFile, 
				data.additional.buildTo && data.additional.buildTo.value, 
				data.additional.php && argPhpHeader),
			code: code
		};
	}
	
	export function init (){
		Node.setInstallCmd ('js-ext -i {0:@(NAME)}');

		fibers ()(lambda {			
			Node.args ('Usage: js-ext file [flags]', { 
					p: { alias: 'php-header',   description: 'Use php header if nessesary.' },
					o: { alias: 'output',       description: 'Output file (else automode) or ":stdout".' },
					c: { alias: 'cache',        description: 'Cache folder (else default) or ":no".' },
					i: { alias: 'includes',     description: 'Folders (divided by ":") with included files.' },
					s: { alias: 'setup',        description: 'Install missing part.' },
					g: { alias: 'gcc',          description: 'Use Google Closure Compiler for better compression and perfomance.' },
					e: { alias: 'expanded',     description: 'Prevent any compressing.' },
					u: { alias: 'usage',        description: 'This text.' },
				});

			try {
				var arg = Node.args ()._[0];
				inputFile = Node.path ().resolve (arg [0] == '"' ? arg.slice (1, -1) : arg);
			}

			if (Node.args ().e)
				Compressor.disable ();
			else if (Node.args ().g)
				Compressor.useClosure ();
				
			if (Node.args ().s){
				var cmd = Node.cp ().spawn ('cmd', ['/C', 'cd', '/d', __dirname, '&&', 'npm', 'install', '2>&1', Node.args ().i]);
				cmd.stdout.on ('data', lambda process.stdout.write (arg.toString ()));
				cmd.on ('close', lambda console.log ('NPM\'s job done' + (arg ? '(with {0} as result).'.format (arg) : '.')));
			} else if (Node.args ().u || !inputFile){
				Node.showHelp ();
			} else if (!Node.fs ().existsSync (inputFile)){
				Node.fatalError ('Input file "{0}" not found.'.format (inputFile));
			} else {
				var argCache      = Node.args ().c ? Node.args ().c.trim () : '';
				cacheFolder       = /^:no(ne|t)?$/i.test (argCache) ? null : asFolder (argCache || Node.resolve ('cache'));
				debugFolder       = asFolder (Node.resolve ('debug'));
				includesFolders   = (Node.args ().i ? Node.args ().i.split (':') : []).concat ([ asFolder (Node.resolve ('includes')) ]);
				
				outputFile        = Node.args ().o;
				argPhpHeader      = Node.args ().p;
				
				silenceMode       = /^:(stdout|console)$/.test (outputFile);
				
				var result = finalStrokes (load (inputFile));
				
				if (silenceMode)
					console.log (result.code);
				else
					Node.writeFile (result.file, result.code);
			}
		}).run ();
	}
}