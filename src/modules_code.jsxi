// ==Jsx==
// @import utils/string.format.obj
// ==/Jsx==

module ModulesCode {
	import Compressor;
	
	export function get (additional){
		var target = additional.target && additional.target.value;
		
		var parts = {
			root: /^web/.test (target) 
				?  'window' 
				:  /^node$/.test (target) 
					?  'GLOBAL' 
					:  /^local$/.test (target) 
						? '0'
						: '"u" != (typeof window)[0] && window || GLOBAL',
			end: target == 'web:onload' 
				?  `'u' != (typeof window)[0] && 'u' != (typeof document)[0] && !/loaded|complete/.test(document.readyState) ? window.addEventListener('load', __m) : __m()` 
				:  '__m()',
			main: additional.modulesPublic
				?  s`if (m){
			        	s [i] = m ();
			        } else if (typeof i == 'string'){
			        	if (!w)
			        		throw "Not initialized yet!";
			        	return s [i].e;
			    	} else if (!w){
			            for (i in s)
			            	if (G (i).g)
			            		G (i).s (G (i).g ().map (function (i){ return G ("@" == i [0] ? i.slice (1) : i).e || {} }));
			            
			            for (i in s)
			            	I (i);
			            
			            w = true;
			        }`
			    :  s`if (m){
			        	s [i] = m ();
			        } else {
			            for (i in s)
			            	if (G (i).g)
			            		G (i).s (G (i).g ().map (function (i){ return G ("@" == i [0] ? i.slice (1) : i).e || {} }));
			            
			            for (i in s)
			            	I (i);
			            
			            {0}
			        }`,
			mainHelper: additional.modulesPublic
				?  ', w = 0'
				:  '',
		};
		
		parts.rootExists = parts.root != '0' ? 'root.' : '';
		parts.local = parts.root != '0' ? '' : 'var __m;';
		parts.main = parts.main.format (parts.root != '0' ? 'delete root.__m' : '');
			
		return {
			begin: Compressor.work (s`{0:@(LOCAL)}(function (){
			    var s = {}, root = {0:@(ROOT)}{0:@(MAIN_HELPER)};
			    
			    function G (i) {
			        if (s [i]) 
			        	return s [i];
			        throw "Not found: " + i;
			    }

			    function I (i) {					        
			        var m = G (i);
			        if (!m._d){
			        	m._a = 1;
			        	if (m.g)
				        	m.g ().forEach (function (other){
					            if ("@" != other [0]) {
					                if (G (other)._a) 
					                	throw "Cycle: " + i + ", " + other;
					                if (!G (other)._d)
					                	I (other);
					            }
					        });
			
				        if (m.v)
				        	m.v ();
				        if (m.i) 
				        	m.i ();
				        m._d = 1;
				        delete m._a;
			        }
			    }
			    
			    {0:@(ROOT_EXISTS)}__m = function (i, m) {
			        {0:@(MAIN)}
			    }
			})();`.format (parts)),
			end: Compressor.work (`{0:@(END)}`.format (parts))
		}
	}
}