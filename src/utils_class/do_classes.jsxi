var classes, 
	thatVariable;

// Получить ближайший класс по имени и пути
function byName (name, path){
	console.assert (typeof name === 'string' && typeof path === 'string', 'Wrong args');

	var length, min = -1, result;

	for (var classEntry in-array classes){
		length = classEntry.path.length;

		if (classEntry.id.name === name && path.substr (0, length) === classEntry.path && min < length){
			min = length;
			result = classEntry;
		}
	}

	return result;
}

function collectRawClasses (statements){
	var array = [], rootId = 0;

	(function fromObj (obj, location){
		if (obj instanceof Array){
			set (obj, obj.filter (lambda (child){
				fromObj (child, location);

				if (child.type === Syntax.RawClassDeclaration){
					array.push ($.extend (child, location));
					return false;
				} else
					return true;
			}));
		} else if (obj && typeof obj === 'object'){
			if (obj.type === Syntax.FunctionDeclaration || obj.type === Syntax.FunctionExpression){
				if (obj.body)
					fromObj (obj.body.body, { root: obj.body.body, path: location.path + '/' + ++ rootId });
			} else
				for (var key, child in obj){
					fromObj (child, location);

					if (child && child.type === Syntax.RawClassDeclaration){
						array.push ($.extend (child, location));
						obj [key] = { type: Syntax.EmptyStatement };
					}
				}
		}
	})(statements, { root: statements, path: '' });

	return array;
}

function sortAndInsertClasses ()
	for (var current in-array classes.sort (lambda (a, b) b.weight - a.weight)){
		current.root.unshift ({
			type: 			Syntax.ClassDeclaration,
			name: 			current.id.name,
			statements: 	current.statements
		});
	}

// Обрабатываем все классы
function doClasses (statements, callback){
	helpers 					= new HelpersManager ();
	classes 					= [];
	options 					= {};
	probablyUseOtherMaxValue 	= 100;
	thatVariable 				= '__that';

	for (var found in-array collectRawClasses (statements))
		addClass (found);

	if (classes.length > 0){
		connectClasses ();
		processClassesMembers ();
		processClassesMethods ();
		processClasses ();
		sortAndInsertClasses ();

		console.info (classes
			.sort (lambda (a, b) a.weight - b.weight)
			.map (lambda arg.id.name + ':' + arg.weight + (arg.childs.length ? ' (' + arg.childs.map (lambda arg.id.name).join (', ') + ')' : ''))
			.join ('; '));

		callback (helpers.helpers);
	} else
		callback ();

	options = null;
}