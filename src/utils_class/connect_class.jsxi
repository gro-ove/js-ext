function searchSuperExpression (obj)
	if (obj.type === Syntax.CallExpression && 'super' in obj && obj.callee === null){
		return true;
	} else if (obj && obj.body && obj.body.body){
		for (var child in-array obj.body.body){
			if (searchSuperExpression (child))
				return true;
		}
	} else {
		for (var key, child in obj)
			if (child && typeof child === 'object' && searchSuperExpression (child))
				return true;
	}

function connectClass (current, from){
	if (from !== undefined)
		current.childs.push (from);

	if (current.connected)
		return;

	if (current.dependsOn.parent !== null){
		var parent = byName (current.dependsOn.parent.name);

		if (!parent)
			throwError (current.dependsOn.parent, Messages.ParentClassNotFound, current.dependsOn.parent.name);

		connectClass (parent, current);

		for (var id, member in parent.members)
			if (!current.members.hasOwnProperty (id))
				current.members [id] = $.extend (true, {}, member, { publicMode: member.publicMode === 'private' ? 'locked' : member.publicMode });

		var parentConstructor = parent.members ['@constructor'],
			currentConstructor = current.members ['@constructor'];

		// Если у родительского класса есть непустой конструктор, в дочернем до-
		// лжен быть вызов супер-конструктора
		if (parentConstructor && parentConstructor.body.body.length > 0){

			// Если у дочернего класса нет конструктора, создаём
			// TODO: Эта ветка никогда не выполнится - или переделать,  позволив 
			// классам обходиться без конструктора, или выкинуть её к чертям
			// TODO: Вообще, какого чёрта? Конструктор создаётся даже для стати-
			// ческого класса?
			if (!currentConstructor){

				// Тело нового конструктора - вызов супер-конструктора
				var body = [ expressionStatement (superExpression (null)) ];

				// Добавляем конструктор классу
				updateMember (current, functionDeclaration ('@constructor', [], body));

			// Иначе,  если в конструкторе дочернего класса нет вызова конструк-
			// тора родительского класса
			} else if (!searchSuperExpression (currentConstructor)){

				// Если  конструктор  дочернего класса  создан автоматически или
				// конструктор родительского класса не содержит параметров,  до-
				// бавим вызов сами
				if (currentConstructor.autocreated || parentConstructor.params.length === 0){

					currentConstructor.body.body = [ 
						expressionStatement (superExpression (null)) 
					].concat (currentConstructor.body.body);

				// Иначе сообщаем об ошибке
				} else 
					throwError (currentConstructor, Messages.SuperConstructorCallNeeded);
			}
		}
	}

	for (var use in-array current.dependsOn.uses){
		var used = byName (use.name);
		if (!used)
			throwError (use, Messages.UsingClassNotFound, use.name);
	}

	current.connected = true;
}

function connectClasses (){
	for (var classEntry in-array classes)
		connectClass (classEntry);
}