function renameMembers (classEntry)
	for (var name, member in classEntry.members){
		var replace = true;

		for (var childClass in-array classEntry.childs)
			if (childClass.members.hasOwnProperty (name)){
				replace = false;
			}

		if (replace)
			member.id.name = rename (member, name, classEntry);
	}

// Получаем заменённое имя в зависимости от видимости переменной
function rename (member, name, classEntry){
	// Конструкторам, инициализаторам, скрытым или приватным статическим имя не меняем
	if (member.static && member.publicMode === 'private' || member.publicMode === 'locked' || member.id.name [0] === '@')
		return name;

	switch (member.publicMode){
		case 'protected':
			return '__' + name;

		case 'private':
			return '__' + name + '_' + name;

		case 'public':
			return name;

		default:
			console.assert (false, 'Unsupported publicMode (' + member.publicMode + ')');
	}
}

function renameClassesMembers (){
	for (var i = classes.length - 1; i >= 0; i --)
		renameMembers (classes [i]);
}