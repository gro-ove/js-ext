// Заменяем содержимое одного объекта содержимым другого
function set (to, from){
	if (to instanceof Array && from instanceof Array){
		to.length = from.length;
		for (var index, element in-array from)
			to [index] = element;
	} else {
		for (var n in to)
			delete to [n];
		for (var n in from)
			to [n] = from [n];
	}
}

var EachMode = {
	FILTER_MODE: 		'filterMode',
	MAP_MODE: 			'mapMode',
	FIRST_HIT_MODE: 	'firstHitMode',
};

// Проходим по полям и методам класса
function each (members, filter, callback, mode){
	if (members.classObject)
		members = members.members;

	var result = mode === EachMode.MAP_MODE || mode === EachMode.FILTER_MODE ? [] : undefined,
		temp;

	if (typeof filter !== 'function')
		filter = null;

	if (typeof callback !== 'function'){
		if (typeof callback === 'string')
			mode = callback;

		callback = null;
	}

	for (var key, value in members)
		if (filter === null || filter (value, key)){
			temp = callback === null ? value : callback (value, key);

			if (mode === EachMode.FIRST_HIT_MODE)
				return temp;

			if (mode === EachMode.MAP_MODE)
				result.push (temp);

			if (mode === EachMode.FILTER_MODE)
				result.push (value);
		}

	return result;
}

// Сокращённые формы записи

function map (members, callback, filter)
	return each (members, filter, callback, EachMode.MAP_MODE);

function filter (members, filter, callback)
	return each (members, filter, callback, EachMode.FILTER_MODE);

function findByReplacement (members, replacement)
	return each (
		members, 
		lambda arg.id && arg.id.name === replacement, 
		EachMode.FIRST_HIT_MODE
	);

function membersOut (classObject){
	var arg = []; 
	for (var key,value in classObject.members) 
		arg.push (key + ':' + value.id); 
	console.log (classObject.id.name + ': ' + arg.join (', '));
}