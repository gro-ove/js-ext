// Записываем класс в список
function addClass (classEntry){
	console.assert (!byName (classEntry.id.name, classEntry.path), 'Already declared');

	// Вспомогательный атрибут на будущее
	classEntry.classObject = true;

	// Проставляем каждому члену имя родительского класса (позже пригодится)
	for (var name, value in classEntry.members)
		value.className = classEntry.id;

	// Находим, а если понадобится, то создаём конструктор
	var constructor = classEntry.members ['@constructor'];
	if (constructor === undefined){
		constructor = updateMember (functionExpression ('@constructor', [], blockStatement ([])), classEntry);
		constructor.autocreated = true;
	}

	// Аналогично со статическим инициализатором
	var initializer = classEntry.members ['@initializer'];
	if (initializer === undefined){
		initializer = updateMember (functionExpression ('@initializer', [], blockStatement ([])), classEntry);
		initializer.static = true;
		initializer.autocreated = true;
	}

	// Обновляем поля и методы
	for (var name, member in classEntry.members)
		updateMember (member, classEntry);

	// Находим список полей объекта, требующих инициализации
	var fields = filter (classEntry.members, lambda !arg.method && !arg.static && arg.init);

	// Собираем присваивания для инициализации
	var initialization = fields.map (lambda $.extend (
			expressionStatement (assignmentExpression (memberExpression (thisExpression (), arg.id.name), arg.init || 'undefined')),
			{ comment: arg.id.name, autocreated: true }));

	// Запихиваем присваивания в начало конструктора
	constructor.body.body = initialization.concat (constructor.body.body);

	// Всякие мелочи
	classEntry.childs = [];
	classEntry.probablyUseOther = 0;

	// И записываем результат
	classes.push (classEntry);
}

// Обновляем метод или поле
function updateMember (member, classEntry){
	// Если вдруг такого метода или поля в классе нет, добавим
	if (!classEntry.members.hasOwnProperty (member.id.name))
		classEntry.members [member.id.name] = member;

	// И добавляем пару вспомогательных атрибутов
	member.className = classEntry.id;
	member.method = member.type === Syntax.FunctionExpression;
	member.processed = false;

	return member;
}