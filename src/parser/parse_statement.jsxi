	// 12 Statements
	
	function parseStatement (){
		var token = lookahead (), expr, saved;

		if (token.type === Token.EOF)
			throwUnexpected (token);

		if (token.type === Token.Punctuator)
			switch (token.value){
				case ';':
					return parseEmptyStatement ();
				case '{':
					try {
						saved = saveAll ();
						expr = parseObjectInitialiser ();
						consumeSemicolon ();
						return expressionStatement (expr);
					} catch {
						restoreAll (saved);
						return parseBlock ();
					}
				case '(':
					return parseExpressionStatement ();
				case '.':
					if (source [token.range [0] + 1] === '.' && source [token.range [0] + 2] === '.'){
						lex ();
						lex ();
						lex ();

						return expressionStatement (callExpression (
							memberExpression ('console', 'warn'), [ literal ('Not implemented at ' + lineNumber + ' line of ' + options.filename) ]));
					}
			}

		if (token.type === Token.Keyword)
			switch (token.value){
				case 'break':
					return parseBreakStatement ();
				case 'continue':
					return parseContinueStatement ();
				case 'debugger':
					return parseDebuggerStatement ();
				case 'do':
					return parseDoWhileStatement ();
				case 'for':
					return parseForStatement ();
				case 'function':
					return parseFunctionDeclaration ();
				case 'if':
					return parseIfStatement ();
				case 'return':
					return parseReturnStatement ();
				case 'switch':
					return parseSwitchStatement ();
				case 'throw':
					return parseThrowStatement ();
				case 'try':
					return parseTryStatement ();
				case 'var':
					return parseVariableStatement ();
				case 'while':
					return parseWhileStatement ();
				case 'with':
					return parseWithStatement ();
				case 'super':
					return parseSuperStatement ();
				default:
					break;
			}

		expr = parseExpression ();

		// 12.12 Labelled Statements

		if (expr.type === Syntax.Identifier && match (':')){
			lex ();

			return labeledStatement (expr, parseStatement ());
		}

		consumeSemicolon ();

		return expressionStatement (expr);
	}