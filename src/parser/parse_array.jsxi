	// 11.1.4 Array Initialiser
	
	function parseArrayInitialiser (){
		var elements = [];

		expect ('[');

		while (!match (']'))
			if (match (',')){
				lex ();
				elements.push (null);
			} else {
				elements.push (parseAssignmentExpression ());

				if (elements.length === 1 && match ('.')){
					token = lookahead ();
					if (source [token.range [0] + 1] === '.'){
						lex ();
						lex ();

						var from = elements [0],
							to = parseAssignmentExpression ();

						expect (']');

						if (from.type === Syntax.Literal && to.type === Syntax.Literal){
							var nfrom 	= +from.value,
								nto 	= +to.value;

							if (Number.isNaN (nfrom))
								nfrom = String (from.value).charCodeAt (0);

							if (Number.isNaN (nto))
								nto = String (to.value).charCodeAt (0);

							if (Math.abs (nto - nfrom) < 20){
								from.value = nfrom;
								if (nto > nfrom)
									for (nfrom ++; nfrom <= nto; nfrom ++)
										elements.push (literal (nfrom));
								else
									for (nfrom ++; nfrom >= nto; nfrom --)
										elements.push (literal (nfrom));
								return arrayExpression (elements);
							}
						}

						helpers.createArray = true;
						return callExpression ('__ca', [ from, to ]);
					}
				}

				if (!match (']'))
					expect (',');
			}

		expect (']');

		return arrayExpression (elements);
	}
