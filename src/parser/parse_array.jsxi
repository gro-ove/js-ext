	var maxCountForInline = 10;

	function parseArrayPerlInitializer (elements){
		var firstElement = elements [0],
			secondElement = parseAssignmentExpression (),
			from, to, delta, chars;

		expect (']');

		if (firstElement.type === Syntax.NumericLiteral && secondElement.type === Syntax.NumericLiteral){
			from 	= +firstElement.value;
			to 		= +secondElement.value;

		} else if (firstElement.type === Syntax.StringLiteral && secondElement.type === Syntax.StringLiteral){
			from 	= stringLiteralValue (firstElement);
			to 		= stringLiteralValue (secondElement);

			if (from === null || from.length > 1)
				unexpected (firstElement);

			if (to === null || to.length > 1)
				unexpected (secondElement);

			from 	= from.charCodeAt (0);
			to 		= to.charCodeAt (0);
			chars 	= true;
		}

		if (from !== undefined && Math.abs (from - to) < 10){
			delta = from < to ? 1 : -1;

			while (from !== to){
				from += delta;
				elements.push (chars 
					? stringLiteralWithQuotes (String.fromCharCode (from))
					: numericLiteral (from));
			}

			return arrayExpression (elements);
		} else {
			helpers.set ('createArray', firstElement);
			return callExpression ('__createArray', [ firstElement, secondElement ]);
		}
	}
	
	function parseArrayInitialiser (){
		var elements = [], comma = {};

		expect ('[');

		while (!match (']'))
			if (match (',')){
				parseOptionalComma (comma);
				elements.push (null);
			} else {
				elements.push (parseAssignmentExpression ());

				if (elements.length === 1 && match ('..')){
					lex ();
					return parseArrayPerlInitializer (elements);
				}

				if (!match (']'))
					parseOptionalComma (comma);
			}

		expect (']');

		return arrayExpression (elements);
	}
