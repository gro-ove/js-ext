	// 11.1.4 Array Initialiser

	function parseArrayPerlInitializer (elements, from){
		expect ('.');
		expect ('.');

		var from = elements [0],
			to = parseAssignmentExpression ();

		expect (']');

		if (from.type === Syntax.Literal && to.type === Syntax.Literal){
			var nfrom 	= +from.value,
				nto 	= +to.value;

			if (Number.isNaN (nfrom))
				nfrom = String (from.value).charCodeAt (0);

			if (Number.isNaN (nto))
				nto = String (to.value).charCodeAt (0);

			if (Math.abs (nto - nfrom) < 10){
				from.value = nfrom;
				if (nto > nfrom)
					for (nfrom ++; nfrom <= nto; nfrom ++)
						elements.push (from);
				else
					for (nfrom ++; nfrom >= nto; nfrom --)
						elements.push (from);
				return arrayExpression (elements);
			}
		}

		if (!helpers.createArray)
			helpers.createArray = from;
		return callExpression ('__ca', [ from, to ]);
	}
	
	function parseArrayInitialiser (){
		var elements = [], token, comma = {}, from = mark ();

		expect ('[');

		while (!match (']'))
			if (match (',')){
				parseOptionalComma (comma);
				elements.push (null);
			} else {
				elements.push (parseAssignmentExpression ());
				token = lookahead ();

				if (elements.length === 1 && token.value === '.' && source [token.range [0] + 1] === '.')
					return parseArrayPerlInitializer (elements, from);

				if (token.value !== ']')
					parseOptionalComma (comma);
			}

		expect (']');

		return arrayExpression (elements);
	}
