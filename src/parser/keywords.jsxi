	// 7.6.1.1 Keywords

	function isKeyword (id){
		var keyword = false;

		switch (id.length){
			case 2:
				keyword = (id === 'if') || (id === 'in') || (id === 'do');
				break;
			case 3:
				keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try') || (id === 'uses');
				break;
			case 4:
				keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');
				break;
			case 5:
				keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw') || (id === 'class') || (id === 'super');
				break;
			case 6:
				keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch') || (id === 'lambda') || (id === 'static') || (id === 'public');
				break;
			case 7:
				keyword = (id === 'default') || (id === 'finally') || (id === 'private') || (id === 'extends');
				break;
			case 8:
				keyword = (id === 'function') || (id === 'continue') || (id === 'debugger') || (id === 'abstract');
				break;
			case 9:
				keyword = (id === 'protected') || (id === 'interface');
				break;
			case 10:
				keyword = (id === 'instanceof') || (id === 'implements');
				break;
			case 11:
				keyword = (id === 'implemented');
				break;
		}

		if (keyword)
			return true;

		return isFutureReservedWord (id);
	}

	// 7.6.1.2 Future Reserved Words

	function isFutureReservedWord (id)
		switch (id){
			// Future reserved words.
			case 'enum':
			case 'export':
			case 'import':
				return true;
			default:
				return false;
		}