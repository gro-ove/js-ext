function readPunctuator (){
	var start = index,
		ch1 = source [index],
		ch2,
		ch3,
		ch4;

	if (ch1 === ';' || ch1 === '{' || ch1 === '}' || ch1 === ',' || ch1 === '(' || ch1 === ')')
		return {
			type:           Token.Punctuator,
			value:          ch1,
			lineNumber:     lineNumber,
			range:          [ start, ++ index ]
		}

	ch2 = source [index + 1];
	ch3 = source [index + 2];

	// obj.key .0 .. ...
	if (ch1 === '.')
		if (ch2 === '.')
			return {
				type:           Token.Punctuator,
				value:          ch3 === '.' ? '...' : '..',
				lineNumber:     lineNumber,
				range:          [ start, index += ch3 === '.' ? 3 : 2 ]
			}
		else if (!decimalDigit (ch2))
			return {
				type:           Token.Punctuator,
				value:          '.',
				lineNumber:     lineNumber,
				range:          [ start, ++ index ]
			}

	ch4 = source [index + 3];

	// >>>=
	if (ch1 === '>' && ch2 === '>' && ch3 === '>' && ch4 === '=')
		return {
			type:           Token.Punctuator,
			value:          '>>>=',
			lineNumber:     lineNumber,
			range:          [ start, index += 4 ]
		}

	// === !== <<= >>> >>=
	if ((ch1 === '=' || ch1 === '!') && ch2 === '=' && ch3 === '=' ||
		ch1 === '<' && ch2 === '<' && ch3 === '=' ||
		ch1 === '>' && ch2 === '>' && (ch3 === '>' || ch3 === '='))
		return {
			type:           Token.Punctuator,
			value:          ch1 + ch2 + ch3,
			lineNumber:     lineNumber,
			range:          [ start, index += 3 ]
		}

	// <= >= == != ++ -- << >> && || += -= *= %= &= |= ^= /=
	if (ch2 === '=' && '<>=!+-*%&|^/'.indexOf (ch1) >= 0 ||
		ch1 === ch2 && '+-<>&|'.indexOf (ch1) >= 0)
		return {
			type:           Token.Punctuator,
			value:          ch1 + ch2,
			lineNumber:     lineNumber,
			range:          [ start, index += 2 ]
		};

	// [ ] < > + - * % & | ^ ! ~ ? : = /
	if (ch1 === '[' || ch1 === ']' || ch1 === '<' || 
		ch1 === '>' || ch1 === '+' || ch1 === '-' || 
		ch1 === '*' || ch1 === '%' || ch1 === '&' || 
		ch1 === '|' || ch1 === '^' || ch1 === '!' || 
		ch1 === '~' || ch1 === '?' || ch1 === ':' || 
		ch1 === '=' || ch1 === '/')
		return {
			type:           Token.Punctuator,
			value:          ch1,
			lineNumber:     lineNumber,
			range:          [ start, ++ index ]
		}
}
