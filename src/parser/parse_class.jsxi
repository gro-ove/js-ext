	function createClass (name, parent, usedClasses, variableDeclarations, functionDeclarations){
		var moduleFnName = '__m', returnProperties, objectVariables = [], initVariables = [], objectConstructor, temp;

		var independVariableDeclarations = {
			type: 'VariableDeclaration',
			declarations: [],
			kind: 'var'
		};

		for (var entry in-array variableDeclarations)
			if (entry.staticMode){
				entry.declarations.forEach (lambda {
					if (arg.init && arg.init.type !== 'Literal'){
						temp =  {
							type: 	'VariableDeclarator',
							id: 	arg.id
						};

						initVariables.push ({
							type: 'ExpressionStatement',
							expression: {
								type: 'AssignmentExpression',
								operator: '=',
								left: arg.id,
								right: arg.init
							}
						});
					} else
						temp = arg;

					independVariableDeclarations.declarations.push (temp);
				});
			} else {
				entry.declarations.forEach (lambda {
					arg.publicMode = entry.publicMode;
					objectVariables.push (arg);
				});
			}

		returnProperties = functionDeclarations
			.filter (lambda arg.staticMode && arg.publicMode === 'public' && arg.id.name [0] !== '@')
			.map (lambda {
				type: 	'Property',
				key: 	arg.id,
				value: 	arg.id,
				kind: 	'init'
			});

		returnProperties = returnProperties.concat (
			functionDeclarations.filter (lambda arg.staticMode && arg.id.name [0] === '@').map (lambda {
				var result = {
					type: 	'Property',
					key: 	arg.id,
					value: 	arg,
					kind: 	'init'
				};

				result.value.id = null;
				return result;
			})
		);

		if (!functionDeclarations.filter (lambda !arg.staticMode && arg.id.name === '@c')[0])
			functionDeclarations.push ({
				type: 			Syntax.FunctionExpression,
				id: 			{ type: 'Identifier', name: '@c' },
				params: 		[],
				defaults: 		[],
				body: 			{ type: 'BlockStatement', body: [] },
				rest: 			null,
				generator: 		false,
				expression: 	false
			});

		returnProperties.push ({
			type: 'Property',
			key: {
				type: 'Identifier',
				name: '@o'
			},
			value: {
				type: 'ObjectExpression',
				properties: functionDeclarations.filter (lambda !arg.staticMode).map (lambda {
					arg.type = Syntax.FunctionExpression;

					if (arg.id.name === '@c'){
						temp = objectVariables.map (lambda {
							type: 'ExpressionStatement',
							expression: {
								type: 'AssignmentExpression',
								operator: '=',
								left: {
									type: 'MemberExpression',
									computed: false,
									object: {
										type: 'ThisExpression'
									},
									property: arg.id
								},
								right: arg.init || { 
									type: 'Identifier',
									name: 'undefined'
								}
							}
						});

						arg.body.body = temp.concat (arg.body.body);
					}

					var result = {
						type: 	'Property',
						key: 	arg.id,
						value: 	arg,
						kind: 	'init'
					};

					result.value.id = null;
					return result;
				})
			}
		});

		if (initVariables.length)
			returnProperties.push ({
				type: 'Property',
				key: {
					type: 'Identifier',
					name: '@s'
				},
				value: {
					type: 			Syntax.FunctionExpression,
					id: 			null,
					params: 		[],
					defaults: 		[],
					body: 			{ type: 'BlockStatement', body: initVariables },
					rest: 			null,
					generator: 		false,
					expression: 	false
				}
			});

		var result = {
			type: 'ExpressionStatement',
			expression: {
				type: 'CallExpression',
				callee: {
					type: 'Identifier',
					name: moduleFnName
				},
				arguments: [
					{
						type: 'Literal',
						value: name
					},
					{
						type: 'FunctionExpression',
						id: null,
						params: [],
						defaults: [],
						body: {
							type: 'BlockStatement',
							body: (independVariableDeclarations.declarations.length ? [
								independVariableDeclarations
							] : []).concat (
								functionDeclarations.filter (lambda arg.staticMode && arg.id).map (lambda {
									arg.type = Syntax.FunctionDeclaration;
									return arg;
								})
							).concat ([
								{
									type: 'ReturnStatement',
									argument: {
										'type': 'ObjectExpression',
										'properties': returnProperties
									}
								}
							])
						}
					},
					{
						type: 'ArrayExpression',
						elements: usedClasses.map (lambda {
							type: 'Literal',
							value: arg.name
						})
					}
				]
			}
		};

		addClass (
			name, 
			parent,
			usedClasses.map (lambda arg.name), 
			objectVariables.map (lambda { name: arg.id.name, publicMode: arg.publicMode }), 
			result);

		return result;
	}

	function parseModuleSourceElements (){
		var sourceElement,
			usedClasses = [],
			variableDeclarations = [],
			functionDeclarations = [];

		expect ('{');

		while (index < length){
			if (match ('}'))
				break;

			var token = lookahead ();

			if (token.type === Token.Keyword)
				switch (token.value){
					case 'function':
						functionDeclarations.push (parseFunctionDeclaration ());
						continue;
					case 'var':
						variableDeclarations.push (parseStatement ());
						continue;
				}

			throwError ({}, 'Module can contain variabled and functions only');
		}

		expect ('}');

		return {
			type: 	Syntax.BlockStatement,
			body: 	variableDeclarations.concat (functionDeclarations)
		};
	}

	function parseUseStatement (){
		var list = [];

		expectKeyword ('use');

		do {
			list.push (parseVariableIdentifier ());
			if (!match (','))
				break;
			lex ();
		} while (index < length);

		consumeSemicolon ();

		return list;
	}

	function parseClassDeclaration (){
		var id, 
			parent,
			token,
			temp,
			staticMode,
			publicMode,
			usedClasses = [],
			variableDeclarations = [],
			functionDeclarations = [];

		expectKeyword ('class');

		id = parseVariableIdentifier ();

		if (matchKeyword ('extends')){
			lex ();
			parent = parseVariableIdentifier ();
		}

		expect ('{');

		while (index < length){
			if (match ('}'))
				break;

			publicMode = undefined;
			staticMode = false;

			if (matchKeyword ('static')){
				staticMode = true;
				lex ();
			}

			if (matchKeyword ('public')){
				publicMode = 'public';
				lex ();
			}

			if (matchKeyword ('protected')){
				if (publicMode)
					throwError ({}, 'WTF MAN?');
				publicMode = 'protected';
				lex ();
			}

			if (matchKeyword ('private')){
				if (publicMode)
					throwError ({}, 'WTF MAN?');
				publicMode = 'private';
				lex ();
			}

			if (matchKeyword ('static')){
				if (staticMode)
					throwError ({}, 'WTF MAN?');
				staticMode = true;
				lex ();
			}

			if (staticMode && publicMode === 'protected')
				throwError ({}, 'WTF MAN?');

			token = lookahead ();
			temp = null;

			if (token.type === Token.Keyword){
				switch (token.value){
					case 'use':
						if (staticMode || publicMode)
							throwError ({}, 'WTF MAN?');
						temp = true;
						usedClasses = usedClasses.concat (parseUseStatement ());
						continue;
					case 'function':
						temp = parseFunctionDeclaration ();
						functionDeclarations.push (temp);
						break;
					case 'var':
						temp = parseVariableStatement ();
						variableDeclarations.push (temp);
						break;
				}
			} else if (token.type === Token.Punctuator && token.value === '(' || token.value === '{'){
				temp = token.value === '(' ? parseFunctionArguments () : [];

				temp = {
					type: 			Syntax.FunctionExpression,
					id: 			{
										type: 'Identifier',
										name: staticMode ? '@i' : '@c'
									},
					params: 		temp,
					defaults: 		[],
					body: 			parseFunctionSourceElements (),
					rest: 			null,
					generator: 		false,
					expression: 	false
				};

				functionDeclarations.push (temp);
			}

			if (temp){
				temp.staticMode = !!staticMode;
				temp.publicMode = publicMode || 'private';
			} else {
				console.log (token, temp);
				throwError ({}, 'Class can contain variabled and functions only');
			}
		}

		expect ('}');

		return createClass (id.name, parent.name, usedClasses, variableDeclarations, functionDeclarations);
	}