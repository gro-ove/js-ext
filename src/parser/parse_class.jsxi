function parseClassParams (){
	/*
		Класс или интерфейс. Возможно, статический; возможно, публичный, приватный или защищённый. Класс может быть абс-
		трактным, но в таком случае не может быть статическим.
	*/

	var token, 
		result = { 
			publicMode: 		null, 
			abstract: 			false,
			static: 			false,
			interface: 			false,
			partial: 			false
		};

	loop: do {
		token = lex ();

		switch (token.value){
			case 'public':
			case 'private':
			case 'protected':
				if (result.publicMode !== null)
					unexpected (token);
				result.publicMode = token.value;
				break;

			case 'partial':
				if (result.partial)
					unexpected (token);
				result.partial = true;
				break;

			case 'abstract':
			case 'static':
				if (result.static || result.abstract)
					unexpected (token);
				result [token.value] = true;
				break;

			case 'interface':
				if (result.abstract)
					unexpected (token);
				result.interface = token.value;

			case 'class':
				break loop;

			default:
				unexpected (token);
		}
	} while (index < length);

	if (result.publicMode === null)
		result.publicMode = 'private';

	return result;
}

function parseExtendsImplementsAndUses (mode){
	// Родительский класс не для интерфейсов и статических классов. Имплементить интерфейсы и использовать «uses», умеют
	// все, даже статические классы (но статические могут имплементить лишь статические).

	function collect (list = []){
		do 
			list.push (parseIdentifier ());
		while (index < length && matchLex (','));
		return list;
	}

	var result = { parent: null, implements: [], uses: [] };

	while (!match ('{')){
		if (!result.parent && !mode.interface && !mode.static && matchKeywordLex ('extends')){
			helpers.set ('prototypeExtend');
			result.parent = parseIdentifier ();
		} else if (matchKeywordLex ('implements')){
			collect (result.implements);
		} else if (matchKeywordLex ('uses')){
			collect (result.uses);
		} else
			unexpected ();
	}

	return result;
}

function parseClassMembers (params, dependsOn){
	var oldInClass = state.inClass,
		token, 
		current,
		result = {};

	function refresh ()
		current = { publicMode: null, static: params.static };

	function set (obj){
		if (obj.type === Syntax.GetterDeclarator){
			obj.id.originalName = obj.id.name;
			obj.id.name += '__get_';
		} else if (obj.type === Syntax.SetterDeclarator){
			obj.id.originalName = obj.id.name;
			obj.id.name += '__set_';
		}

		if (result.hasOwnProperty (obj.id.name))
			throw new SyntaxError ('Member "' + obj.id.name + '" already declared', token);

		obj.publicMode = current.publicMode || params.publicMode;
		obj.static = current.static;
		obj.abstract = current.abstract;

		result [obj.id.name] = obj;
	}

	function parseField (){
		if (params.interface && !current.static)
			throw new TypeError ('Interface cannot have object fields');

		if (current.abstract && (current.publicMode || params.publicMode) === 'private')
			throw new TypeError ('Abstract member cannot be private'); /* btw, why? */

		for (var entry in-array parseVariableDeclarators ())
			set (entry);

		refresh ();
	}

	function parseGetterDeclarators (empty){
		var result = [];
		
		do {
			result.push (getterDeclarator (parseIdentifier (), empty ? null : parsePropertyGetter ()));
		} while (index < length && matchLex (','));

		consumeSemicolon ();
		return result;
	}

	function parseSetterDeclarators (empty){
		var result = [];
		
		do {
			result.push (setterDeclarator (parseIdentifier (), empty ? null : parsePropertySetter ()));
		} while (index < length && matchLex (','));

		consumeSemicolon ();
		return result;
	}

	function parseGetter (){
		if (params.interface && !current.static)
			throw new TypeError ('Interface cannot have object getters');

		if (current.abstract && (current.publicMode || params.publicMode) === 'private')
			throw new TypeError ('Abstract getter cannot be private');

		for (var entry in-array parseGetterDeclarators (current.abstract))
			set (entry);

		refresh ();
	}

	function parseSetter (){
		if (params.interface && !current.static)
			throw new TypeError ('Interface cannot have object getters');

		if (current.abstract && (current.publicMode || params.publicMode) === 'private')
			throw new TypeError ('Abstract setter cannot be private');

		for (var entry in-array parseSetterDeclarators (current.abstract))
			set (entry);

		refresh ();
	}

	function parseMethod (){
		if (current.abstract && (current.publicMode || params.publicMode) === 'private')
			throw new TypeError ('Abstract member cannot be private');

		state.superAvailable = !current.static && dependsOn.parent;
		set (parseFunction ({ keyword: null, empty: params.interface && !current.static || current.abstract }));
		state.superAvailable = false;

		refresh ();
	}

	function parseInitializerOrConstructor (){
		if (current.publicMode)
			throw new TypeError ('Constructor or initializer cannot have overrided visibility');

		if (current.abstract)
			throw new TypeError ('Constructor or initializer cannot be abstract');

		state.superAvailable = !current.static && dependsOn.parent;
		state.noReturn = true;

		var result = parseFunction ({ keyword: null, id: false, optionalParams: true });
		result.id = identifier (current.static ? '@initializer' : '@constructor');

		state.superAvailable = false;
		state.noReturn = false;

		set (result);
		refresh ();
	}

	function nextParse(token){
		if (token.type === Token.Identifier){
			var saved = saveAll (),
				method;

			lex ();
			method = match ('(');
			restoreAll (saved);

			if (method)
				parseMethod ();
			else 
				parseField ();
		} else
			unexpected (token);
	}

	state.inClass = true;
	expect ('{');
	refresh ();

	while (!matchLex ('}')){
		token = lookahead ();

		switch (token.value){
			case 'private':
			case 'public':
			case 'protected':
				if (current.publicMode !== null)
					unexpected (token);
				lex ();
				current.publicMode = token.value;
				break;

			case 'abstract':
				if (params.interface)
					unexpected (token);

			case 'static':
				if (current.abstract || current.static)
					unexpected (token);
				lex ();
				current [token.value] = true;
				break;

			case 'var':
				lex ();
				parseField ();
				break;

			case 'get':
				attemptTo(lambda {
					lex ();
					parseGetter ();
				}, lambda {
					nextParse (token);
				});
				break;

			case 'set':
				attemptTo(lambda {
					lex ();
					parseSetter ();
				}, lambda {
					nextParse (token);
				});
				break;

			case 'function':
				lex ();
				parseMethod ();
				break;

			case '(':
			case '{':
				parseInitializerOrConstructor ();
				break;

			default:
				nextParse (token);
		}
	}

	state.inClass = oldInClass;
	return result;
}

function parseClassDeclaration (){
	var params 		= parseClassParams (),
		id 			= parseIdentifier (),
		dependsOn 	= parseExtendsImplementsAndUses (params),
		members 	= parseClassMembers (params, dependsOn);

	return {
		type: 			Syntax.RawClassDeclaration,
		id: 			id,
		params: 		params,
		dependsOn: 		dependsOn,
		members: 		members
	};
}
