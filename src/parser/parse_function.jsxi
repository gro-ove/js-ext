	// 13 Function Definition
	function parseFunctionSourceElements (){
		var sourceElement, 
			sourceElements = [], 
			token, 
			oldLabelSet, 
			oldInIteration, 
			oldInSwitch, 
			oldInFunctionBody;

		expect ('{');

		while (index < length){
			token = lookahead ();

			if (token.type !== Token.StringLiteral)
				break;

			sourceElement = parseSourceElement ();
			sourceElements.push (sourceElement);

			// this is not directive
			if (sourceElement.expression.type !== Syntax.Literal)
				break;
		}

		oldLabelSet 			= state.labelSet;
		oldInIteration 			= state.inIteration;
		oldInSwitch 			= state.inSwitch;
		oldInFunctionBody 		= state.inFunctionBody;

		state.labelSet 			= {};
		state.inIteration 		= false;
		state.inSwitch 			= false;
		state.inFunctionBody 	= true;

		while (index < length){
			if (match ('}'))
				break;
			sourceElement = parseSourceElement ();
			if (typeof sourceElement === 'undefined') 
				break;
			sourceElements.push (sourceElement);
		}

		expect ('}');

		state.labelSet 			= oldLabelSet;
		state.inIteration 		= oldInIteration;
		state.inSwitch 			= oldInSwitch;
		state.inFunctionBody 	= oldInFunctionBody;

		return {
			type: Syntax.BlockStatement,
			body: sourceElements
		};
	}

	function parseFunctionDeclaration (){
		var id, 
			param, 
			params = [], 
			body, 
			token, 
			message, 
			paramSet;

		expectKeyword ('function');

		token 	= lookahead ();
		id 		= parseVariableIdentifier ();

		expect ('(');

		if (!match (')')){
			paramSet = {};

			while (index < length) {
				token = lookahead ();
				param = parseVariableIdentifier ();

				params.push (param);
				paramSet [param.name] = true;

				if (match (')')) 
					break;

				expect (',');
			}
		}

		expect (')');

		body = parseFunctionSourceElements ();

		return {
			type: 			Syntax.FunctionDeclaration,
			id: 			id,
			params: 		params,
			defaults: 		[],
			body: 			body,
			rest: 			null,
			generator: 		false,
			expression: 	false
		};
	}

	function parseFunctionExpression (){
		var token, 
			id = null, 
			param, 
			params = [], 
			body, 
			paramSet;

		expectKeyword ('function');

		if (!match ('(')){
			token 	= lookahead ();
			id 		= parseVariableIdentifier ();
		}

		expect ('(');

		if (!match (')')){
			paramSet = {};
			while (index < length){
				token 	= lookahead ();
				param 	= parseVariableIdentifier ();

				params.push (param);
				paramSet [param.name] = true;

				if (match (')'))
					break;

				expect (',');
			}
		}

		expect (')');

		body = parseFunctionSourceElements ();

		return {
			type: 			Syntax.FunctionExpression,
			id: 			id,
			params: 		params,
			defaults: 		[],
			body: 			body,
			rest: 			null,
			generator: 		false,
			expression: 	false
		};
	}