	// 13 Function Definition
	function parseFunctionSourceElements (){
		var sourceElement, 
			sourceElements = [];

		if (match ('{')){
			expect ('{');

			while (index < length){
				if (match ('}'))
					break;
				sourceElement = parseSourceElement ();
				if (typeof sourceElement === 'undefined') 
					break;
				sourceElements.push (sourceElement);
			}

			expect ('}');
		} else 
			sourceElements.push (parseSourceElement ());

		return {
			type: 	Syntax.BlockStatement,
			body: 	sourceElements
		};
	}

	function parseFunctionDeclaration (){
		var id, 
			param, 
			params = [], 
			body, 
			token, 
			message, 
			paramSet;

		expectKeyword ('function');

		token 	= lookahead ();
		id 		= parseVariableIdentifier ();

		expect ('(');

		if (!match (')')){
			paramSet = {};

			while (index < length) {
				token = lookahead ();
				param = parseVariableIdentifier ();

				params.push (param);
				paramSet [param.name] = true;

				if (match (')')) 
					break;

				expect (',');
			}
		}

		expect (')');

		body = parseFunctionSourceElements ();

		return {
			type: 			Syntax.FunctionDeclaration,
			id: 			id,
			params: 		params,
			defaults: 		[],
			body: 			body,
			rest: 			null,
			generator: 		false,
			expression: 	false
		};
	}

	function parseFunctionArguments (){
		var token, params = [];

		expect ('(');

		if (!match (')'))
			while (index < length){
				token = lookahead ();
				params.push (parseVariableIdentifier ());

				if (match (')'))
					break;

				expect (',');
			}

		expect (')');

		return params;
	}

	function parseFunctionExpression (){
		var token, id = null, param, params, body;

		expectKeyword ('function');

		if (!match ('(')){
			token 	= lookahead ();
			id 		= parseVariableIdentifier ();
		}

		params = parseFunctionArguments ();
		body = parseFunctionSourceElements ();

		return {
			type: 			Syntax.FunctionExpression,
			id: 			id,
			params: 		params,
			defaults: 		[],
			body: 			body,
			rest: 			null,
			generator: 		false,
			expression: 	false
		};
	}

	function parseLambdaExpression (){
		var token, param, params = [], body;

		expectKeyword ('lambda');

		params = match ('(') ? parseFunctionArguments () : [];
		body = parseFunctionSourceElements ();

		return {
			type: 			Syntax.FunctionExpression,
			id: 			null,
			params: 		params,
			defaults: 		[],
			body: 			body,
			rest: 			null,
			generator: 		false,
			expression: 	false
		};
	}