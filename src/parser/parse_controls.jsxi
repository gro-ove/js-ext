    // 12.7 The continue statement

    function parseContinueStatement (){
        var token, label = null;

        expectKeyword ('continue');

        // Optimize the most common form: 'continue;'.
        if (source [index] === ';'){
            lex ();
            return continueStatement ();
        }

        if (peekLineTerminator ()) 
            return continueStatement ();

        token = lookahead ();
        if (token.type === Token.Identifier)
            label = parseVariableIdentifier ();

        consumeSemicolon ();
        return continueStatement (label);
    }

    // 12.8 The break statement

    function parseBreakStatement (){
        var token, label = null;

        expectKeyword ('break');

        // Optimize the most common form: 'break;'.
        if (source [index] === ';'){
            lex ();
            return breakStatement ();
        }

        if (peekLineTerminator ())
            return breakStatement ();

        token = lookahead ();
        if (token.type === Token.Identifier)
            label = parseVariableIdentifier ();

        consumeSemicolon ();
        return breakStatement (label);
    }

    // 12.9 The return statement

    function parseReturnStatement (){
        var token, argument = null;

        expectKeyword ('return');

        // 'return' followed by a space and an identifier is very common.
        if (source [index] === ' ' && isIdentifierStart (source [index + 1])){
            argument = parseExpression ();
            consumeSemicolon ();
            return returnStatement (argument);
        }

        if (peekLineTerminator ())
            return returnStatement ();

        if (!match (';')){
            token = lookahead ();
            if (!match ('}') && token.type !== Token.EOF)
                argument = parseExpression ();
        }

        consumeSemicolon ();
        return returnStatement (argument);
    }

    // 12.13 The throw statement

    function parseThrowStatement (){
        var argument;

        expectKeyword ('throw');

        if (peekLineTerminator ())
            throwError ({}, Messages.NewlineAfterThrow);

        argument = parseExpression ();
        consumeSemicolon ();

        return throwStatement (argument);
    }