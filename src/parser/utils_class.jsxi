var classes;

function addClass (name, parent, uses, variables, data){
	if (classes [name])
		throwError ({}, 'WTF MAN?');

	var variablesObject = {};
	for (var v in-array variables)
		variablesObject [v.name] = v.publicMode;

	classes [name] = {
		parent: 	parent,
		uses: 		uses,
		variables: 	variablesObject,
		data: 		data
	}
}

function initClasses (){
	classes = {};
}

function setupClass (name){
	var entry = classes [name], exclusions, body, functions;

	assert (entry, 'Class not found: ' + name);

	if (entry.done)
		return;

	function updateExclusions (obj)
		if (obj.type === 'FunctionDeclaration' || obj.type === 'FunctionExpression'){
			exclusions = {};
			updateExclusions (obj.body);
		} else if (obj.type === 'VariableDeclarator'){
			exclusions [obj.id.name] = true;
		} else if (obj instanceof Array){
			for (var i = 0; i < obj.length; i ++)
				if (obj [i].type !== 'FunctionDeclaration' && obj [i].type !== 'FunctionExpression')
					updateExclusions (obj [i]);
		} else if (obj.type){
			for (var n in obj)
				if (obj [n].type !== 'FunctionDeclaration' && obj [n].type !== 'FunctionExpression')
					updateExclusions (obj [n]);
		}

	function thisify (obj)
		if (obj){
			var oldExclusions, temp;

			if (obj.type === 'FunctionDeclaration' || obj.type === 'FunctionExpression'){
				oldExclusions = exclusions;
				updateExclusions (obj);
			}

			if (obj.type === 'Identifier' && entry.variables [obj.name] && !exclusions [obj.name]){
				if (entry.variables [obj.name] === 'locked')
					throwError ({}, 'Attempt to access to private field: ' + obj.name);

				return {
					type: 		'MemberExpression',
					computed: 	false,
					object: 	{ type: 'ThisExpression' },
					property: 	{ type: 'Identifier', name: obj.name }
				};
			} else if (obj instanceof Array){
				for (var i = 0; i < obj.length; i ++)
					obj [i] = thisify (obj [i]) || obj [i];
			} else if (obj.type === 'Property'){
				obj.value = thisify (obj.value) || obj.value;
			} else if (obj.type && obj.type !== 'MemberExpression'){
				for (var n in obj)
					obj [n] = thisify (obj [n]) || obj [n];
			}

			if (oldExclusions)
				exclusions = oldExclusions;
		}

	body 		= entry.data.expression.arguments [1].body.body;
	functions 	= body [body.length - 1].argument.properties.filter (lambda arg.key.name === '@o')[0].value.properties;

	if (entry.parent !== null)
		if (!classes [entry.parent]){
			throwError ({}, 'Parent class not found: ' + use);
		} else {
			setupClass (entry.parent);
			for (var n, v in classes [entry.parent].variables)
				if (!entry.variables [n])
					entry.variables [n] = v === 'private' ? 'locked' : v;
		}

	for (var use in-array entry.uses){
		if (!classes [use])
			throwError ({}, 'Using class not found: ' + use);
	}

	thisify (functions);

	entry.done = true;
}

function setupClasses (){
	for (var name in classes)
		setupClass (name);
}

function resetClasses (){
	classes = undefined;
}
