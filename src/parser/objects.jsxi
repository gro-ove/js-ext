	function literal (value)
		return typeof value === 'object' ? value : {
			type: Syntax.Literal,
			value: value
		}

	function identifier (arg)
		return !arg ? null : typeof arg === 'string' ? {
			type: 			Syntax.Identifier,
			name: 			arg
		} : arg

	function block (body = [])
		return body instanceof Array ? {
			type: 			Syntax.BlockStatement,
			body: 			body
		} : body

	function variableDeclarator (id)
		return {
			type: 			Syntax.VariableDeclarator,
			id: 			id
		}

	function memberExpression (obj, property, computed = false)
		return {
			type: 			Syntax.MemberExpression,
			computed: 		computed,
			object: 		identifier (obj),
			property: 		identifier (property)
		}

	function callExpression (name, arguments = [])
		return {
			type: 			Syntax.CallExpression,
			callee: 		identifier (name),
			arguments: 		arguments
		}

	function assignmentExpression (left, right)
		return {
			type: 			Syntax.AssignmentExpression,
			operator: 		'=',
			left: 			identifier (left),
			right: 			identifier (right)
		}

	function newExpression (callee, arguments = [])
		return {
			type: 			Syntax.NewExpression,
			callee: 		identifier (callee),
			arguments: 		arguments
		}

	function binaryExpression (left, operator, right)
		return {
            type: 			Syntax.BinaryExpression,
            operator: 		operator,
			left: 			identifier (left),
			right: 			identifier (right)
        }

	function expressionStatement (expression)
		return {
			type: 			Syntax.ExpressionStatement,
			expression: 	expression
		}

	function ifStatement (test, trueStatement, falseStatement = null)
		return {
			type: 			Syntax.IfStatement,
            test: 			test,
            consequent: 	trueStatement,
            alternate: 		falseStatement
		}

	function returnStatement (arg)
		return {
			type: 			Syntax.ReturnStatement,
			argument: 		identifier (arg)
		}

	function functionExpression (name, params = [], body)
		return {
			type: 			Syntax.FunctionExpression,
			id: 			identifier (name),
			params: 		params,
			defaults: 		[],
			body: 			block (body),
			rest: 			null,
			generator: 		false,
			expression: 	false
		};

	function functionDeclaration (name, params = [], body)
		return {
			type: 			Syntax.FunctionDeclaration,
			id: 			identifier (name),
			params: 		params,
			defaults: 		[],
			body: 			block (body),
			rest: 			null,
			generator: 		false,
			expression: 	false
		};

	function variableDeclarator (name, value){
		return {
			type: 			Syntax.VariableDeclarator,
			id: 			identifier (name),
			init: 			identifier (value)
		}
	}

	function variableDeclaration (variables)
		return {
			type: 			Syntax.VariableDeclaration,
			declarations: 	variables,
			kind: 			'var'
		}