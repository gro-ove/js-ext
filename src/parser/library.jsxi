// TODO: Make it not so terrible

// TODO: 'Invalid identifier'
// TODO: 'Class member "..." already defined'

var Token = {
		Punctuator: 					0,
		Identifier: 					1,
		Keyword: 						2,
		BooleanLiteral: 				3,
		NullLiteral: 					4,
		NumericLiteral: 				5,
		StringLiteral: 					6,
		UndefinedLiteral: 				7,
		EOF: 							8
	},
	TokenName = [
		'Punctuator',
		'Identifier',
		'Keyword',
		'Boolean',
		'Null',
		'Numeric',
		'String',
		'Undefined',
		'<end>'
	],
	Syntax = {
		AssignmentExpression: 			'AssignmentExpression',
		ArrayExpression: 				'ArrayExpression',
		BlockStatement: 				'BlockStatement',
		BinaryExpression: 				'BinaryExpression',
		BreakStatement: 				'BreakStatement',
		CallExpression: 				'CallExpression',
		CatchClause: 					'CatchClause',
		ConditionalExpression: 			'ConditionalExpression',
		ContinueStatement: 				'ContinueStatement',
		DoWhileStatement: 				'DoWhileStatement',
		DebuggerStatement: 				'DebuggerStatement',
		EmptyStatement: 				'EmptyStatement',
		ExpressionStatement: 			'ExpressionStatement',
		ForStatement: 					'ForStatement',
		ForInStatement: 				'ForInStatement',
		FunctionDeclaration: 			'FunctionDeclaration',
		FunctionExpression: 			'FunctionExpression',
		Identifier: 					'Identifier',
		IfStatement: 					'IfStatement',
		LabeledStatement: 				'LabeledStatement',
		LogicalExpression: 				'LogicalExpression',
		MemberExpression: 				'MemberExpression',
		NewExpression: 					'NewExpression',
		ObjectExpression: 				'ObjectExpression',
		Program: 						'Program',
		Property: 						'Property',
		ReturnStatement: 				'ReturnStatement',
		SequenceExpression: 			'SequenceExpression',
		SwitchStatement: 				'SwitchStatement',
		SwitchCase: 					'SwitchCase',
		ThisExpression: 				'ThisExpression',
		ThrowStatement: 				'ThrowStatement',
		TryStatement: 					'TryStatement',
		UnaryExpression: 				'UnaryExpression',
		VariableDeclaration:			'VariableDeclaration',
		VariableDeclarator: 			'VariableDeclarator',
		WhileStatement: 				'WhileStatement',
		WithStatement: 					'WithStatement',

		BooleanLiteral: 				'BooleanLiteral',
		NullLiteral: 					'NullLiteral',
		NumericLiteral: 				'NumericLiteral',
		RegexpLiteral: 					'RegexpLiteral',
		StringLiteral: 					'StringLiteral',
		UndefinedLiteral: 				'UndefinedLiteral',
		
		NotImplementedStatement: 		'NotImplementedStatement',
	}, 
	PropertyKind = {
		Data: 							1,
		Get: 							2,
		Set: 							4
	};
