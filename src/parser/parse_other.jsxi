function mark (obj, token){
	obj.filename = options.filename;
	obj.lineNumber = token.lineNumber;
	return obj;
}

function parseIdentifier (){
	var token = lex ();
	if (token.type !== Token.Identifier)
		unexpected (token);
	return mark ({ type: Syntax.Identifier, name: token.value }, token);
}

function parseOptionalComma (state){
	var token = lookahead ();

	if (state.comma === undefined)
		state.comma = token.value === ',';
	else if (state.comma !== (token.value === ','))
		unexpected (token);

	if (token.value === ',')
		lex ();
}

function parseArguments (){
	var args = [], comma = {};
	expect ('(');

	while (!matchLex (')')){
		if (args.length)
			parseOptionalComma (comma);
		args.push (parseAssignmentExpression ());
	}

	return args;
}

function parseStatementList (){
	var list = [];
	while (index < length && !match ('}'))
		list.push (parseStatement ());
	return list;
}

function parseBlock (){
	var block, oldPreventSequence = state.preventSequence;
	state.preventSequence = false;

	expect ('{');
	block = parseStatementList ();
	expect ('}');

	state.preventSequence = oldPreventSequence;
	return blockStatement (block);
}

function parseBlockOrNotBlock (){
	if (match ('{'))
		return parseBlock ();
	else
		return blockStatement ([ parseStatement () ], true);
}

function parseProgram (){
	var elements = [];

	while (lookahead ().type !== Token.EOF)
		elements.push (parseStatement ());

	if (options.insertReturn && elements.length === 1)
		setReturnStatement (elements [0]);

	return {
		type: 				Syntax.Program,
		body: 				elements
	}
}
