function identifierFromToken (token)
	return {
		type: 				Syntax.Identifier,
		name: 				token.value,
		filename: 			options.filename,
		lineNumber: 		token.lineNumber
	}

function stringLiteralFromToken (token)
	return {
		type: 				Syntax.StringLiteral,
		value: 				token.value,
		filename: 			options.filename,
		lineNumber: 		token.lineNumber
	}

function thisExpressionFromToken (token)
	return {
		type: 				Syntax.ThisExpression,
		filename: 			options.filename,
		lineNumber: 		token.lineNumber
	}

function functionExpressionFromToken (token, name, params, body)
	return {
		type: 				Syntax.FunctionExpression,
		id: 				name,
		params: 			params,
		body: 				body,
		filename: 			options.filename,
		lineNumber: 		token.lineNumber
	};

function functionDeclarationFromToken (token, name, params, body)
	return {
		type: 				Syntax.FunctionDeclaration,
		id: 				name,
		params: 			params,
		body: 				body,
		filename: 			options.filename,
		lineNumber: 		token.lineNumber
	}