function HelpersManager (){
	this.helpers = {};
}

HelpersManager.prototype.set = function (key, arg){
	if (!this.helpers.hasOwnProperty (key))
		this.helpers [key] = true;
}

HelpersManager.prototype.get = function (key, arg){
	return this.helpers;
}

function helperById (id, mark)
	switch (id){
		case 'prototypeExtend':
			return functionDeclaration ('__prototypeExtend', [ 'c', 'p', 't' ], blockStatement ([
				expressionStatement (assignmentExpression ('t', functionExpression (null, [], blockStatement ([])))),
				expressionStatement (assignmentExpression (
						memberExpression ('t', 'prototype'), memberExpression ('p', 'prototype'))),
				expressionStatement (assignmentExpression (
						memberExpression ('c', 'prototype'), newExpression ('t'))),
				expressionStatement (assignmentExpression (
						memberExpression (memberExpression ('c', 'prototype'), 'constructor'), 'c'))
			]));

		case 'createArray':
			// TODO: Strings length
			return functionDeclaration ('__createArray', [ 'from', 'to', 'result' ], blockStatement ([
				ifStatement (
					binaryExpression (unaryExpression ('from', 'typeof', true), '===', stringLiteralWithQuotes ('string')), 
					expressionStatement (assignmentExpression ('from', callExpression (memberExpression ('from', 'charCodeAt'), [ numericLiteral (0) ])))
				),
				ifStatement (
					binaryExpression (unaryExpression ('to', 'typeof', true), '===', stringLiteralWithQuotes ('string')), 
					expressionStatement (assignmentExpression ('to', callExpression (memberExpression ('to', 'charCodeAt'), [ numericLiteral (0) ])))
				),
				expressionStatement (assignmentExpression ('result', newExpression ('Array', [ 
					binaryExpression (callExpression (memberExpression ('Math', 'abs'), [ binaryExpression ('to', '-', 'from') ]), '+', numericLiteral (1))]))),
				ifStatement (
					binaryExpression ('from', '<', 'to'), 
					forStatement (
						variableDeclaration ([ variableDeclarator ('i', numericLiteral (0)) ]),
						binaryExpression ('i', '<', memberExpression ('result', 'length')),
						unaryExpression ('i', '++'),
						expressionStatement (assignmentExpression (memberExpression ('result', 'i', true), binaryExpression ('i', '+', 'from')))
					),
					forStatement (
						variableDeclaration ([ variableDeclarator ('i', binaryExpression (memberExpression ('result', 'length'), '-', numericLiteral (1))) ]),
						binaryExpression ('i', '>=', numericLiteral (0)),
						unaryExpression ('i', '--'),
						expressionStatement (assignmentExpression (memberExpression ('result', 'i', true), binaryExpression ('from', '-', 'i')))
					)
				),
				returnStatement ('result')
			]));

		case 'bindOnce':
			var bindedTable = memberExpression ('obj', '__bindTable'),
				objectFunction = memberExpression ('obj', 'name', true),
				placeInTable = memberExpression (bindedTable, 'name', true);

			return functionDeclaration ('__bindOnce', [ 'obj', 'name' ], blockStatement ([
				ifStatement (
					unaryExpression (callExpression (memberExpression ('obj', 'hasOwnProperty'), [ stringLiteralWithQuotes ('__bindTable') ]), '!', true),
					expressionStatement (assignmentExpression (bindedTable, objectExpression ([])))
				),
				ifStatement (
					unaryExpression (callExpression (memberExpression (bindedTable, 'hasOwnProperty'), [ 'name' ]), '!', true),
					expressionStatement (assignmentExpression (placeInTable, callExpression (memberExpression (objectFunction, 'bind'), [ 'obj' ])))
				),
				returnStatement (placeInTable)
			]));

		default:
			console.assert (false, 'Wrong helper id: ' + id)
	}

function doHelpers (helpers){
	var result = [],
		temp;

	for (var id, value in helpers)
		if (value && typeof value !== 'function'){
			temp = helperById (id, value);
			// if (typeof value === 'object')
			// 	markAll (temp, value);
			result.push (temp);
		}

	return result;
}