function helperById (id, value)
	switch (id){
		case 'prototypeExtend':
			return functionDeclaration ('__pe', [ 'child', 'parent', 'temp' ], [
				expressionStatement (assignmentExpression ('temp', functionExpression ())),
				expressionStatement (assignmentExpression (
						memberExpression ('temp', 'prototype'), memberExpression ('parent', 'prototype'))),
				expressionStatement (assignmentExpression (
						memberExpression ('child', 'prototype'), newExpression ('temp'))),
				expressionStatement (assignmentExpression (
						memberExpression (memberExpression ('child', 'prototype'), 'constructor'), 'child'))
			]);

		case 'createArray':
			return functionDeclaration ('__ca', [ 'from', 'to', 'result' ], [
				ifStatement (
					binaryExpression (unaryExpression ('from', 'typeof', true), '===', literal ('string')), 
					expressionStatement (assignmentExpression ('from', callExpression (memberExpression ('from', 'charCodeAt'), [ literal (0) ])))
				),
				ifStatement (
					binaryExpression (unaryExpression ('to', 'typeof', true), '===', literal ('string')), 
					expressionStatement (assignmentExpression ('to', callExpression (memberExpression ('to', 'charCodeAt'), [ literal (0) ])))
				),
				expressionStatement (assignmentExpression ('result', newExpression ('Array', [ 
					binaryExpression (callExpression (memberExpression ('Math', 'abs'), [ binaryExpression ('to', '-', 'from') ]), '+', literal (1))]))),
				ifStatement (
					binaryExpression ('from', '<', 'to'), 
					forStatement (
						variableDeclaration ([ variableDeclarator ('i', literal (0)) ]),
						binaryExpression ('i', '<', memberExpression ('result', 'length')),
						unaryExpression ('i', '++'),
						expressionStatement (assignmentExpression (memberExpression ('result', 'i', true), binaryExpression ('i', '+', 'from')))
					),
					forStatement (
						variableDeclaration ([ variableDeclarator ('i', binaryExpression (memberExpression ('result', 'length'), '-', literal (1))) ]),
						binaryExpression ('i', '>=', literal (0)),
						unaryExpression ('i', '--'),
						expressionStatement (assignmentExpression (memberExpression ('result', 'i', true), binaryExpression ('from', '-', 'i')))
					)
				),
				returnStatement ('result')
			]);

		case 'bindOnce':
			var bindedTable = memberExpression ('obj', '__bt'),
				objectFunction = memberExpression ('obj', 'name', true),
				placeInTable = memberExpression (bindedTable, 'name', true);

			return functionDeclaration ('__bo', [ 'obj', 'name' ], [
				ifStatement (
					unaryExpression (callExpression (memberExpression ('obj', 'hasOwnProperty'), [ literal ('__bt') ]), '!', true),
					expressionStatement (assignmentExpression (bindedTable, objectExpression ()))
				),
				ifStatement (
					unaryExpression (callExpression (memberExpression (bindedTable, 'hasOwnProperty'), [ 'name' ]), '!', true),
					expressionStatement (assignmentExpression (placeInTable, callExpression (memberExpression (objectFunction, 'bind'), [ 'obj' ])))
				),
				returnStatement (placeInTable)
			]);

		case 'findReplaced':
			return functionDeclaration ('__fr', [ 'obj', 'name' ], [
				returnStatement ('undefined')
			]);

		default:
			console.assert (false, 'Wrong helper id: ' + id)
	}

function doHelpers (helpers){
	var result = [];

	for (var id, value in helpers)
		if (value)
			result.push (helperById (id, value));

	return result;
}