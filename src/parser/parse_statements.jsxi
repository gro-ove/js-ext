function parseStatement (){
	var token = lookahead ();

	if (token.type === Token.EOF)
		unexpected (token);

	if (token.type === Token.Punctuator)
		switch (token.value){
			case ';':
				lex ();
				return { type: Syntax.EmptyStatement };
			case '{':
				return attemptTo (lambda {
					var expression = parseObjectInitialiser ();
					consumeSemicolon ();
					return expressionStatement (expression);
				}, parseBlock);
			case '(':
				var expression = parseExpression ();
				consumeSemicolon ();

				return {
					type: 			Syntax.ExpressionStatement,
					expression: 	expression
				};
			case '...':
				lex ();
				return { type: Syntax.NotImplementedStatement, lineNumber: lineNumber, filename: options.filename };
		}

	if (token.type === Token.Keyword)
		switch (token.value){
			case 'public':
			case 'protected':
			case 'private':
			case 'static':
			case 'abstract':
			case 'class':
			case 'interface':
			case 'partial': 	return parseClassDeclaration ();
			case 'function': 	return parseFunctionDeclaration (); 
			case 'if': 			return parseIfStatement ();
			case 'var': 		return parseVariableDeclaration (); 
			case 'do': 			return parseDoWhileStatement (); 
			case 'for': 		return parseForStatement (); 
			case 'switch': 		return parseSwitchStatement (); 
			case 'try': 		return parseTryStatement (); 
			case 'while': 		return parseWhileStatement (); 
			case 'with': 		return parseWithStatement (); 
			case 'break': 		return parseBreakStatement ();
			case 'continue': 	return parseContinueStatement ();
			case 'return': 		return parseReturnStatement ();
			case 'throw': 		return parseThrowStatement ();
			case 'debugger': 	return parseDebuggerStatement ();
		}

	var expression = parseExpression ();

	if (expression.type === Syntax.Identifier && matchLex (':')){
		return labeledStatement (expression, parseStatement ());
	} else {
		consumeSemicolon ();
		return expressionStatement (expression);
	}
}

function parseVariableDeclarators (semicolon){
	var result = [];
	do {
		result.push (variableDeclarator (parseIdentifier (), matchLex ('=') ? parseAssignmentExpression () : null));
	} while (index < length && matchLex (','));

	if (semicolon !== false)
		consumeSemicolon ();

	return result;
}

function parseVariableDeclaration (){
	expectKeyword ('var');
	return variableDeclaration (parseVariableDeclarators ());
}

function parseContinueStatement (){
	var label = null;

	expectKeyword ('continue');

	if (source [index] === ';'){
		lex ();
		return continueStatement ();
	}

	if (peekLineTerminator ())
		return continueStatement ();

	if (lookahead ().type === Token.Identifier)
		label = parseVariableIdentifier ();

	consumeSemicolon ();
	return continueStatement (label);
}

function parseBreakStatement (){
	var label = null;

	expectKeyword ('break');

	if (source [index] === ';'){
		lex ();
		return breakStatement ();
	}

	if (peekLineTerminator ())
		return breakStatement ();

	if (lookahead ().type === Token.Identifier)
		label = parseVariableIdentifier ();

	consumeSemicolon ();
	return breakStatement (label);
}

function parseReturnStatement (){
	var argument = null;

	if (state.noReturn)
		unexpected (lookahead ());

	expectKeyword ('return');

	if (source [index] === ' ' && identifierStart (source [index + 1])){
		argument = parseExpression ();
		consumeSemicolon ();
		return returnStatement (argument);
	}

	if (peekLineTerminator ())
		return returnStatement ();

	if (!match (';') && !match ('}') && lookahead ().type !== Token.EOF)
		argument = parseExpression ();

	consumeSemicolon ();
	return returnStatement (argument);
}

function parseThrowStatement (){
	expectKeyword ('throw');

	if (peekLineTerminator ())
		throwError ({}, Messages.NewlineAfterThrow);

	var argument = parseExpression ();
	consumeSemicolon ();

	return throwStatement (argument);
}

function parseDebuggerStatement (){
	expectKeyword ('debugger');
	consumeSemicolon ();
	return debuggerStatement ();
}

function parseIfStatement (){
	expectKeyword ('if');
	expect ('(');

	var test = parseExpression (),
		consequent,
		alternate;

	expect (')');

	consequent = parseStatement ();

	if (matchKeyword ('else')){
		lex ();
		alternate = parseStatement ();
	} else 
		alternate = null;

	return ifStatement (test, consequent, alternate);
}

function parseDoWhileStatement (){
	expectKeyword ('do');

	var body = parseStatement ();

	expectKeyword ('while');
	expect ('(');

	var test = parseExpression ();

	expect (')');
	matchLex (';');

	return doWhileStatement (body, test);
}

function parseWhileStatement (){
	expectKeyword ('while');
	expect ('(');

	var test = parseExpression ();

	expect (')');

	return whileStatement (test, parseStatement ());
}

function parseForStatement (){
	var init = null, test = null, update = null,
		left, right, body, temp, result, arrayMode,
		identifierMode, propertyName;

	expectKeyword ('for');
	expect ('(');

	if (!matchLex (';')){
		if (matchKeywordLex ('var')){
			state.allowIn 	= false;
			init			= variableDeclaration (parseVariableDeclarators (false));
			state.allowIn 	= true;

			if (init.declarations.length <= 2 && (matchKeyword ('in-array') || matchKeyword ('in-object') || matchKeyword ('in'))){
				arrayMode 	= lex ().value;
				left 		= init;
				right 		= parseExpression ();
				init 		= null;
			}
		} else {
			state.allowIn 	= false;
			init 			= parseExpression ();
			state.allowIn 	= true;

			if (matchKeyword ('in-array') || matchKeyword ('in-object') || matchKeyword ('in')){
				if (init.type !== Syntax.SequenceExpression)
					leftSideOnly (init);
				else if (init.expressions.length !== 2)
					leftSideOnly ();

				arrayMode 	= lex ().value;
				left 		= init;
				right 		= parseExpression();
				init 		= null;
			}
		}

		if (left === undefined)
			expect (';');
	}

	if (left === undefined){
		if (!match (';'))
			test = parseExpression ();

		expect (';');

		if (!match (')'))
			update = parseExpression ();
	}

	expect (')');
	body = parseStatement ();

	if (arrayMode === 'in-array')
		if (left.type === Syntax.VariableDeclaration && left.declarations.length === 1){
			left.declarations = [ variableDeclarator (newIdentifier ()), left.declarations [0] ]
		} else if (left.type === Syntax.Identifier){
			left = variableDeclaration ([ variableDeclarator (newIdentifier ()), variableDeclarator (left) ]);
			identifierMode = true;
		}

	if (left === undefined){
		return forStatement (init, test, update, body);
	} else if (left.type === Syntax.SequenceExpression && left.expressions.length === 2 || identifierMode){
		temp = body;

		body = blockStatement ([ 
			expressionStatement (assignmentExpression (
					identifierMode ? left.declarations [1].id : left.expressions [1],
					memberExpression (right, identifierMode ? left.declarations [0].id : left.expressions [0], true))) ]);

		if (temp.type === Syntax.BlockStatement)
			[].push.apply (body.body, temp.body);
		else
			body.body.push (temp);

		if (identifierMode)
			left.declarations.length = 1;
		else
			left = left.expressions [0];
	} else if (left.type === Syntax.VariableDeclaration && left.declarations.length === 2){
		temp = body;
		body = blockStatement ([ variableDeclaration ([ left.declarations [1] ]) ]);
		body.body [0].declarations [0].init = memberExpression (right, left.declarations [0].id, true);

		if (temp.type === Syntax.BlockStatement)
			[].push.apply (body.body, temp.body);
		else
			body.body.push (temp);

		left.declarations.length = 1;
	}

	if (arrayMode === 'in-array'){
		if (left.type === Syntax.VariableDeclaration && !left.declarations [0].init)
			left.declarations [0].init = numericLiteral (0);

		temp = left.type === Syntax.VariableDeclaration
			? left.declarations [0].id 
			: left.type === Syntax.SequenceExpression
				? left.expressions [0]
				: left;

		if (left.type === Syntax.Identifier)
			left = assignmentExpression (left, numericLiteral (0));

		result = forStatement (
			left, 
			binaryExpression (temp, '<', memberExpression (right, 'length')), 
			unaryExpression (temp, '++', false), 
			body);
	} else {
		if (arrayMode === 'in-object'){
			propertyName = left.type === Syntax.VariableDeclaration ? left.declarations [0].id.name : left.name;
			body = ifStatement (callExpression (memberExpression (right, 'hasOwnProperty'), [ propertyName ]), body);
		}

		result = forInStatement (left, right, body);
	}

	if ((temp !== undefined || arrayMode === 'in-object') && right.type !== Syntax.Identifier){
		var identifier = newIdentifier ();

		temp = $.extend (true, {}, right);

		for (var n in right)
			delete right [n];

		right.type = Syntax.Identifier;
		right.name = identifier;

		return blockStatement ([
			variableDeclaration ([ variableDeclarator (right, temp) ]),
			result,
			expressionStatement (assignmentExpression (right, 'undefined'))
		]);
	}

	return result;
}

// TODO: 'More than one default clause in switch statement'
function parseSwitchCase (){
	var test,
		consequent = [],
		statement;

	if (matchKeywordLex ('default')){
		test = null;
	} else {
		expectKeyword ('case');
		test = parseExpression ();
	}

	expect (':');

	while (!match ('}') && !matchKeyword ('default') && !matchKeyword ('case'))
		consequent.push (parseStatement ());

	return {
		type: 			Syntax.SwitchCase,
		test: 			test,
		consequent: 	consequent
	};
}

function parseSwitchStatement (){
	expectKeyword ('switch');
	expect ('(');

	var discriminant = parseExpression (), cases = [];

	expect (')'); 
	expect ('{');

	while (!matchLex ('}'))
		cases.push (parseSwitchCase ());

	return {
		type: 			Syntax.SwitchStatement,
		discriminant: 	discriminant,
		cases:			cases
	};
}

function parseCatchClause (){
	expectKeyword ('catch');

	var param;

	if (matchLex ('(')){
		param = parseIdentifier ();
		expect (')');
	} else 
		param = identifier ('e');

	return catchClause (param, parseBlockOrNotBlock ());
}

function parseTryStatement (){
	expectKeyword ('try');

	var block 		= parseBlockOrNotBlock (), 
		handlers 	= matchKeyword ('catch') ? [ parseCatchClause () ] : [], 
		finalizer 	= matchKeywordLex ('finally') ? parseBlockOrNotBlock () : null;

	if (finalizer === null && handlers.length === 0)
		handlers.push (catchClause ('e', blockStatement ([])));

	return tryStatement (block, handlers, finalizer);
}

function parseWithStatement (){
	expectKeyword ('with');
	expect ('(');

	var object = parseExpression ();

	expect (')');

	return {
		type:       Syntax.WithStatement,
		object:     object,
		body:       parseStatement ()
	};
}