function parseStatement (){
	var token = lookahead ();

	if (token.type === Token.EOF)
		unexpected (token);

	if (token.type === Token.Punctuator)
		switch (token.value){
			case ';':
				lex ();
				return { type: Syntax.EmptyStatement };
			case '{':
				return attemptTo (lambda {
					var expression = parseObjectInitialiser ();
					consumeSemicolon ();
					return expressionStatement (expression);
				}, parseBlock);
			case '(':
				var expression = parseExpression ();
				consumeSemicolon ();

				return {
					type: 			Syntax.ExpressionStatement,
					expression: 	expression
				};
			case '...':
				lex ();
				return { type: Syntax.NotImplementedStatement, lineNumber: lineNumber, filename: options.filename };
		}

	if (token.type === Token.Keyword)
		switch (token.value){
			case 'function': return parseFunctionDeclaration (); 
			case 'if': return parseIfStatement ();
			case 'var': return parseVariableDeclaration (); 
			case 'do': return parseDoWhileStatement (); 
			case 'for': return parseForStatement (); 
			case 'switch': return parseSwitchStatement (); 
			case 'try': return parseTryStatement (); 
			case 'while': return parseWhileStatement (); 
			case 'with': return parseWithStatement (); 
			case 'break': return parseBreakStatement ();
			case 'continue': return parseContinueStatement ();
			case 'return': return parseReturnStatement ();
			case 'throw': return parseThrowStatement ();
			case 'debugger': return parseDebuggerStatement ();
		}

	var expression = parseExpression ();

	if (expression.type === Syntax.Identifier && matchLex (':')){
		return labeledStatement (expression, parseStatement ());
	} else {
		consumeSemicolon ();
		return expressionStatement (expression);
	}
}

function parseVariableDeclarators (semicolon){
	var result = [];
	do {
		result.push (variableDeclarator (parseIdentifier (), matchLex ('=') ? parseAssignmentExpression () : null));
	} while (index < length && matchLex (','));

	if (semicolon !== false)
		consumeSemicolon ();

	return result;
}

function parseVariableDeclaration (){
	expectKeyword ('var');
	return variableDeclaration (parseVariableDeclarators ());
}

function parseContinueStatement (){
	var label = null;

	expectKeyword ('continue');

	if (source [index] === ';'){
		lex ();
		return continueStatement ();
	}

	if (peekLineTerminator ())
		return continueStatement ();

	if (lookahead ().type === Token.Identifier)
		label = parseVariableIdentifier ();

	consumeSemicolon ();
	return continueStatement (label);
}

function parseBreakStatement (){
	var label = null;

	expectKeyword ('break');

	if (source [index] === ';'){
		lex ();
		return breakStatement ();
	}

	if (peekLineTerminator ())
		return breakStatement ();

	if (lookahead ().type === Token.Identifier)
		label = parseVariableIdentifier ();

	consumeSemicolon ();
	return breakStatement (label);
}

function parseReturnStatement (){
	var argument = null;

	expectKeyword ('return');

	if (source [index] === ' ' && identifierStart (source [index + 1])){
		argument = parseExpression ();
		consumeSemicolon ();
		return returnStatement (argument);
	}

	if (peekLineTerminator ())
		return returnStatement ();

	if (!match (';') && !match ('}') && lookahead ().type !== Token.EOF)
		argument = parseExpression ();

	consumeSemicolon ();
	return returnStatement (argument);
}

function parseThrowStatement (){
	expectKeyword ('throw');

	if (peekLineTerminator ())
		throwError ({}, Messages.NewlineAfterThrow);

	var argument = parseExpression ();
	consumeSemicolon ();

	return throwStatement (argument);
}

function parseDebuggerStatement (){
	expectKeyword ('debugger');
	consumeSemicolon ();
	return debuggerStatement ();
}