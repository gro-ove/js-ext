	// 14 Program

	function parseProgramElement (){
		var token = lookahead ();

		if (token.type === Token.Keyword)
			switch (token.value){
				case 'static':
				case 'class':
					return parseClassDeclaration ();
				case 'function':
					return parseFunctionDeclaration ();
				default:
					return parseStatement ();
			}

		if (token.type !== Token.EOF) 
			return parseStatement ();
	}

	function parseProgramElements (){
		var sourceElement, sourceElements = [], token, directive, temp;

		initClasses ();

		while (index < length){
			token = lookahead ();

			if (token.type !== Token.StringLiteral)
				break;

			sourceElement = parseProgramElement ();
			sourceElements.push (sourceElement);

			if (sourceElement.expression.type !== Syntax.Literal)
				break;

			directive = sliceSource (token.range [0] + 1, token.range [1] - 1);
		}

		while (index < length) {
			sourceElement = parseProgramElement ();
			if (sourceElement === null)
				continue;
			if (typeof sourceElement === 'undefined') 
				break;
			sourceElements.push (sourceElement);
		}

		temp = processClasses ();
		if (typeof temp !== 'undefined')
			sourceElements.push (temp);

		return sourceElements;
	}

	function parseProgram ()
		return program (parseProgramElements ());