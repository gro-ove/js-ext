	// 14 Program

	function parseSourceElement (){
		var token = lookahead ();

		if (token.type === Token.Keyword)
			switch (token.value){
				case 'function':
					return parseFunctionDeclaration ();
				default:
					return parseStatement ();
			}

		if (token.type !== Token.EOF) 
			return parseStatement ();
	}

	function parseSourceElements (){
		var sourceElement, sourceElements = [], token, directive, firstRestricted;

		while (index < length){
			token = lookahead ();
			
			if (token.type !== Token.StringLiteral)
				break;

			sourceElement = parseSourceElement ();
			sourceElements.push (sourceElement);

			if (sourceElement.expression.type !== Syntax.Literal)
				break;

			directive = sliceSource (token.range [0] + 1, token.range [1] - 1);

			if (directive === 'use strict') {
				strict = true;
				if (firstRestricted) 
					throwErrorTolerant (firstRestricted, Messages.StrictOctalLiteral);
			} else if (!firstRestricted && token.octal) 
				firstRestricted = token;
		}

		while (index < length) {
			sourceElement = parseSourceElement ();
			if (typeof sourceElement === 'undefined') 
				break;
			sourceElements.push (sourceElement);
		}

		return sourceElements;
	}

	function parseProgram (){
		strict = false;
		return program = {
			type: Syntax.Program,
			body: parseSourceElements ()
		};
	}