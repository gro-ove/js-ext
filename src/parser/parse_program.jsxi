	// 14 Program

	function parseProgramElement (){
		var token = lookahead (), temp, result;

		if (token.type === Token.Keyword)
			switch (token.value){
				case 'static':
				case 'class':
					return parseClassDeclaration ();
				case 'function':
					return parseFunctionDeclaration ();
				default:
					return parseStatement ();
			}

		if (token.type === Token.Punctuator && (token.value === '(' || token.value === '{')){
			saved = saveAll ();

			try {
				temp 			= token.value === '(' ? parseFunctionArguments () : [];
				result 			= expressionStatement (callExpression (functionExpression (null, temp, parseBlock ())));
				result.after 	= true;

				return result;
			} catch 
				restoreAll (saved);
		}

		if (token.type !== Token.EOF) 
			return parseStatement ();
	}

	function parseProgramElements (){
		var sourceElement, sourceElements = [], token, directive, temp;

		initClasses ();

		while (index < length) {
			sourceElement = parseProgramElement ();
			if (sourceElement === null)
				continue;
			if (typeof sourceElement === 'undefined') 
				break;
			sourceElements.push (sourceElement);
		}

		state.parsingComplete = true;

		temp = doClasses ();
		sourceElements = sourceElements.filter (lambda 
			if (arg.after){
				temp.push (arg);
				return false;
			} else 
				return true);

		if (temp.length)
			Array.prototype.push.apply (sourceElements, temp);

		return sourceElements;
	}

	function parseProgram ()
		return program (parseProgramElements ());