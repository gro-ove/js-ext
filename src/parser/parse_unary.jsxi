	// 11.4 Unary Operators

	function parseUnaryExpression (){
		var token, expr;

		token = lookahead ();

		if (token.type !== Token.Punctuator && token.type !== Token.Keyword)
			return parsePostfixExpression ();

		if (match ('++') || match ('--')){
			token = lex ();
			expr = parseUnaryExpression ();

			if (!isLeftHandSide (expr))
				throwError ({}, Messages.InvalidLHSInAssignment);

			return {
				type: 		Syntax.UpdateExpression,
				operator: 	token.value,
				argument: 	expr,
				prefix: 	true
			};
		}

		if (match ('+') || match ('-') || match ('~') || match ('!'))
			return{
				type: 		Syntax.UnaryExpression,
				operator: 	lex ().value,
				argument: 	parseUnaryExpression (),
				prefix: 	true
			};

		if (matchKeyword ('delete') || matchKeyword ('void') || matchKeyword ('typeof'))
			return {
				type: 		Syntax.UnaryExpression,
				operator: 	lex ().value,
				argument: 	parseUnaryExpression (),
				prefix: 	true
			};

		return parsePostfixExpression ();
	}