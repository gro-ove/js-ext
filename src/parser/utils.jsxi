	var lastIdentifier = 0;
	function newIdentifier ()
		return '__t_' + lastIdentifier ++;

	function clone (obj)
		if (obj instanceof Array){
			return obj.slice ();
		} else if (typeof obj === 'object'){
			var result = {};

			for (var n, v in obj)
				result [n] = clone (v);

			return result;
		} else
			return obj;

	function saveAll ()
		return clone ({
			source: 		source,
			index: 			index,
			lineNumber: 	lineNumber,
			lineStart: 		lineStart,
			length: 		length,
			buffer: 		buffer,
			state: 			state,
			extra: 			extra
		});

	function restoreAll (obj){
		source 			= obj.source;
		index 			= obj.index,
		lineNumber 		= obj.lineNumber,
		lineStart 		= obj.lineStart,
		length 			= obj.length,
		buffer 			= obj.buffer,
		state			= obj.state,
		extra 			= obj.extra
	}

	function advance (){
		var ch, token;

		skipComment ();

		if (index >= length) 
			return {
				type:           Token.EOF,
				lineNumber:     lineNumber,
				lineStart:      lineStart,
				range:          [ index, index ]
			};

		token = scanPunctuator ();
		if (typeof token !== 'undefined')
			return token;

		ch = source[index];
		if (ch === '\'' || ch === '"' || ch === '`') 
			return scanStringLiteral ();

		if (ch === '.' || isDecimalDigit (ch)) 
			return scanNumericLiteral ();

		token = scanIdentifier ();
		if (typeof token !== 'undefined')
			return token;

		throwError ({}, Messages.UnexpectedToken, 'ILLEGAL');
	}

	function lex (){
		var token;

		if (buffer){
			index       = buffer.range [1];
			lineNumber  = buffer.lineNumber;
			lineStart   = buffer.lineStart;
			token       = buffer;
			buffer      = null;
			return token;
		}

		buffer = null;
		return advance ();
	}

	function lookahead (){
		var pos, line, start;

		if (buffer !== null)
			return buffer;

		pos         = index;
		line        = lineNumber;
		start       = lineStart;
		buffer      = advance ();
		index       = pos;
		lineNumber  = line;
		lineStart   = start;

		return buffer;
	}

	// Return true if there is a line terminator before the next token.
	function peekLineTerminator (){
		var pos, line, start, found;

		pos         = index;
		line        = lineNumber;
		start       = lineStart;

		skipComment ();

		found       = lineNumber !== line;
		index       = pos;
		lineNumber  = line;
		lineStart   = start;

		return found;
	}

	// Expect the next token to match the specified punctuator.
	// If not, an exception will be thrown.
	function expect (value){
		var token = lex ();
		if (token.type !== Token.Punctuator || token.value !== value) 
			throwUnexpected (token);
	}

	// Expect the next token to match the specified keyword.
	// If not, an exception will be thrown.
	function expectKeyword (keyword){
		var token = lex ();
		if (token.type !== Token.Keyword || token.value !== keyword) 
			throwUnexpected (token);
	}

	// Return true if the next token matches the specified punctuator.
	function match (value){
		var token = lookahead ();
		return token.type === Token.Punctuator && token.value === value;
	}

	// Return true if the next token matches the specified keyword
	function matchKeyword (keyword){
		var token = lookahead ();
		return token.type === Token.Keyword && token.value === keyword;
	}

	// Return true if the next token is an assignment operator
	function matchAssign (){
		var token = lookahead (),
			op = token.value;

		if (token.type !== Token.Punctuator)
			return false;

		return op === '=' ||
			   op === '*=' ||
			   op === '/=' ||
			   op === '%=' ||
			   op === '+=' ||
			   op === '-=' ||
			   op === '<<=' ||
			   op === '>>=' ||
			   op === '>>>=' ||
			   op === '&=' ||
			   op === '^=' ||
			   op === '|=';
	}