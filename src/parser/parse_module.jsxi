	function createModule (name, usedModules, variableDeclarations, functionDeclarations){
		var moduleFnName = '__m';

		var independVariableDeclarations = {
			type: 'VariableDeclaration',
			declarations: [],
			kind: 'var'
		};

		variableDeclarations.forEach (
			lambda arg.declarations.forEach (
				lambda independVariableDeclarations.declarations.push (
					!arg.init || arg.init.type === 'Literal'
						? arg
						: {
							type: 	'VariableDeclarator',
							id: 	arg.id
						})
				}
			)
		);

		return {
            type: 'ExpressionStatement',
            expression: {
                type: 'CallExpression',
                callee: {
                    type: 'Identifier',
                    name: moduleFnName
                },
                arguments: [
                    {
                        type: 'Literal',
                        value: name
                    },
                    {
                        type: 'FunctionExpression',
                        id: null,
                        params: [],
                        defaults: [],
                        body: {
                            type: 'BlockStatement',
                            body: [
                            	independVariableDeclarations
                            ].concat (functionDeclarations)

                               /* {
                                    type: VariableDeclaration,
                                    declarations: [
                                        {
                                            type: VariableDeclarator,
                                            id: {
                                                type: Identifier,
                                                name: a
                                            },
                                            init: {
                                                type: Literal,
                                                value: 18
                                            }
                                        },
                                        {
                                            type: VariableDeclarator,
                                            id: {
                                                type: Identifier,
                                                name: b
                                            },
                                            init: null
                                        }
                                    ],
                                    kind: var
                                },
                                {
                                    type: FunctionDeclaration,
                                    id: {
                                        type: Identifier,
                                        name: init
                                    },
                                    params: [],
                                    defaults: [],
                                    body: {
                                        type: BlockStatement,
                                        body: []
                                    },
                                    rest: null,
                                    generator: false,
                                    expression: false
                                },
                                {
                                    type: ReturnStatement,
                                    argument: {
                                        type: ObjectExpression,
                                        properties: [
                                            {
                                                type: Property,
                                                key: {
                                                    type: Identifier,
                                                    name: __s
                                                },
                                                value: {
                                                    type: FunctionExpression,
                                                    id: null,
                                                    params: [],
                                                    defaults: [],
                                                    body: {
                                                        type: BlockStatement,
                                                        body: [
                                                            {
                                                                type: ExpressionStatement,
                                                                expression: {
                                                                    type: AssignmentExpression,
                                                                    operator:=,
                                                                    left: {
                                                                        type:Identifier,
                                                                        name:b
                                                                    },
                                                                    right: {
                                                                        type: MemberExpression,
                                                                        computed: false,
                                                                        object: {
                                                                            type: Identifier,
                                                                            name: B
                                                                        },
                                                                        property: {
                                                                            type: Identifier,
                                                                            name: variable
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    rest: null,
                                                    generator: false,
                                                    expression: false
                                                },
                                                kind: init
                                            },
                                            {
                                                type: Property,
                                                key: {
                                                    type: Identifier,
                                                    name: __i
                                                },
                                                value: {
                                                    type: Identifier,
                                                    name: init
                                                },
                                                kind: init
                                            }
                                        ]
                                    }
                                }*/
                        },
                        rest: null,
                        generator: false,
                        expression: false
                    }
                ]
            }
        };
	}

	function parseModuleSourceElements (){
		var sourceElement,
			usedModules = [],
			variableDeclarations = [],
			functionDeclarations = [];

		expect ('{');

		while (index < length){
			if (match ('}'))
				break;

			var token = lookahead ();

			if (token.type === Token.Keyword)
				switch (token.value){
					case 'function':
						functionDeclarations.push (parseFunctionDeclaration ());
						continue;
					case 'var':
						variableDeclarations.push (parseStatement ());
						continue;
				}

			throwError ({}, 'Module can contain variabled and functions only');
		}

		expect ('}');

		return {
			type: 	Syntax.BlockStatement,
			body: 	variableDeclarations.concat (functionDeclarations)
		};
	}

	function parseModuleDeclaration (){
		var id, 
			usedModules = [],
			variableDeclarations = [],
			functionDeclarations = [];

		expectKeyword ('module');

		id = parseVariableIdentifier ();

		expect ('{');

		while (index < length){
			if (match ('}'))
				break;

			var token = lookahead ();

			if (token.type === Token.Keyword)
				switch (token.value){
					case 'function':
						functionDeclarations.push (parseFunctionDeclaration ());
						continue;
					case 'var':
						variableDeclarations.push (parseStatement ());
						continue;
				}

			throwError ({}, 'Module can contain variabled and functions only');
		}

		expect ('}');

		return createModule (id.name, usedModules, variableDeclarations, functionDeclarations);
	}