	function JsExtError (name, message, location){
		var filename = location && location.filename || options && options.filename || '<unknown file>',
			lineNumber = location && location.lineNumber || lineNumber || '<unknown line>',
			result = new Error (message + ' [' + filename + ':' + lineNumber + ']');

		result.name = name;
		return result;
	};

	var SyntaxError 	= JsExtError.bind (null, 'SyntaxError'),
		TypeError 		= JsExtError.bind (null, 'TypeError'),
		ReferenceError 	= JsExtError.bind (null, 'ReferenceError');

	function unexpected (what){
		var message;

		if (!what){
			message = 'Illegal token';
		} else if (what.value){
			message = 'Unexpected ' + (what.value [0] === '"' || what.value [0] === '\'' ? what.value : '"' + what.value + '"');
		} else if (TokenName [what.type]){
			message = 'Unexpected ' + TokenName [what.type].toLowerCase ();
		} else 
			message = 'Unexpected token';

		throw new SyntaxError (message, what);
	}
