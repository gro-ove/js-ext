	function ParseError (filename, lineNumber, message){
		var result,
			name = 'ParseError';

		if (arguments [3]){
			name = filename;
			filename = lineNumber;
			lineNumber = message;
			message = arguments [3];
		}

		if (typeof filename === 'object'){
			message 			= lineNumber;

			this.lineNumber 	= filename.lineNumber;
			this.filename 		= filename.filename;
			// this.index 		= filename.range [0];
			// this.column 		= filename.range [0] - filename.lineStart + 1;
		} else {
			this.lineNumber 	= lineNumber;
			this.filename 		= filename;
		}

		result = new Error (message + ' [' + filename + ':' + lineNumber + ']');
		result.name = name;

		return result;
	};

	function throwError (token, messageFormat){
		var args 		= Array.prototype.slice.call (arguments, 2),
			msg 		= messageFormat.replace (/%(\d)/g, lambda (whole, index) args [index] || ''),
			filename 	= options.filename;

		if (typeof token.filename === 'string')
			filename = token.filename;

		throw new ParseError (token && token.filename || options.filename, token ? token.lineNumber : lineNumber, msg);

		// if (typeof token.index === 'number'){
		// 	error 				= new Error ('Line ' + token.lineNumber + ' (' + filename + '): ' + msg);
		// 	error.index 		= token.index;
		// 	error.lineNumber 	= token.lineNumber;
		// 	error.column 		= token.index - token.lineStart + 1;
		// } else if (typeof token.lineNumber === 'number'){
		// 	error 				= new Error ('Line ' + token.lineNumber + ' (' + filename + '): ' + msg);
		// 	error.index 		= token.range [0];
		// 	error.lineNumber 	= token.lineNumber;
		// 	error.column 		= token.range [0] - lineStart + 1;
		// } else {
		// 	error 				= new Error ('Line ' + lineNumber + ' (' + filename + '): ' + msg);
		// 	error.index 		= index;
		// 	error.lineNumber 	= lineNumber;
		// 	error.column 		= index - lineStart + 1;
		// }

		// throw error;
	}

	function throwUnexpected (token)
		throwError (token, 
			token.type === Token.EOF ? Messages.UnexpectedEOS : 
			token.type === Token.NumericLiteral ? Messages.UnexpectedNumber :
			token.type === Token.StringLiteral ? Messages.UnexpectedString :
			token.type === Token.Identifier ? Messages.UnexpectedIdentifier :
			token.type === Token.Keyword && isFutureReservedWord (token.value) ? Messages.UnexpectedReserved : 
			Messages.UnexpectedToken, token.value);