	// Throw an exception

	function throwError (token, messageFormat){
		var error,
			args 	= Array.prototype.slice.call (arguments, 2),
			msg 	= messageFormat.replace (/%(\d)/g, lambda (whole, index) args [index] || '');

		if (typeof token.index === 'number'){
			error 				= new Error ('Line ' + token.lineNumber + ': ' + msg);
			error.index 		= token.index;
			error.lineNumber 	= token.lineNumber;
			error.column 		= token.index - token.lineStart + 1;
		} else if (typeof token.lineNumber === 'number'){
			error 				= new Error ('Line ' + token.lineNumber + ': ' + msg);
			error.index 		= token.range [0];
			error.lineNumber 	= token.lineNumber;
			error.column 		= token.range [0] - lineStart + 1;
		} else {
			error 				= new Error ('Line ' + lineNumber + ': ' + msg);
			error.index 		= index;
			error.lineNumber 	= lineNumber;
			error.column 		= index - lineStart + 1;
		}

		throw error;
	}

	// Throw an exception because of the token.

	function throwUnexpected (token){
		if (token.type === Token.EOF)
			throwError (token, Messages.UnexpectedEOS);

		if (token.type === Token.NumericLiteral)
			throwError (token, Messages.UnexpectedNumber);

		if (token.type === Token.StringLiteral)
			throwError (token, Messages.UnexpectedString);

		if (token.type === Token.Identifier)
			throwError (token, Messages.UnexpectedIdentifier);

		if (token.type === Token.Keyword){
			if (isFutureReservedWord (token.value))
				throwError (token, Messages.UnexpectedReserved);
			
			throwError (token, Messages.UnexpectedToken, token.value);
		}

		throwError (token, Messages.UnexpectedToken, token.value);
	}