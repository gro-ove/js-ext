function readStringLiteral (){
	var quote = source [index],
		start = index ++;

	// TODO: Increase lineNumber and etc.
	while (index < length && source [index] !== quote)
		index += source [index] === '\\' ? 2 : 1;

	if (source [index ++] !== quote) 
		unexpected ();

	return {
		type:           Token.StringLiteral,
		value:          source.substring (start, index),
		lineNumber:     lineNumber,
		range:          [ start, index ]
	};
}

var tabSize = 4,
	tabSpaces = new Array (tabSize + 1).join (' ');

function readMultilineString (){
	var start = index ++;

	// TODO: Increase lineNumber and etc.
	while (index < length && source [index] !== '`')
		index += source [index] === '\\' ? 2 : 1;

	if (source [index ++] !== '`') 
		unexpected ();

	var result = source.substring (start + 1, index - 1),
		spaces = result.match (/\n([\t ]*)/g);

	if (spaces){
		// TODO: Cache regular expressions?

		spaces = spaces
			.concat (source.substring (source.lastIndexOf ('\n', start), start + 1).replace (/[^\n\t ]/g, ' '))
			.map (lambda [].reduce.call (arg.replace (/^\n/, ''), lambda (a, b) a += b === '\t' ? tabSize : 1, 0))
			.reduce (lambda (a, b) a < b ? a : b);

		var regExp = new RegExp ('\\n(?:\\t|' + tabSpaces + '){' + Math.floor (spaces / tabSize) + '}' + tabSpaces.substr (0, spaces % tabSize), 'g');
		result = result.replace (regExp, '\n');
	}

	return {
		type:           Token.StringLiteral,
		value:          JSON.stringify (result.replace (/\\`/g, '`')),
		lineNumber:     lineNumber,
		range:          [ start, index ]
	};
}