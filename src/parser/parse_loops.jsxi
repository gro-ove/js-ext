	// 12.6 Iteration Statements

	function parseDoWhileStatement (){
		var body, test;

		expectKeyword ('do');

		body = parseStatement ();

		expectKeyword ('while');
		expect ('(');

		test = parseExpression ();

		expect (')');

		if (match (';'))
			lex ();

		return doWhileStatement (body, test);
	}

	function parseWhileStatement (){
		var test;

		expectKeyword ('while');
		expect ('(');

		test = parseExpression ();

		expect (')');

		return whileStatement (test, parseStatement ());
	}

	function parseForVariableDeclaration (){
		lex ();
		return variableDeclaration (parseVariableDeclarationList ());
	}

	function parseForStatement (){
		var init, test, update, left, right, body, temp, result, arrayMode;

		init = test = update = null;

		expectKeyword ('for');
		expect ('(');

		if (match (';')){
			lex ();
		} else {
			if (matchKeyword ('var')){
				state.allowIn 	= false;
				init			= parseForVariableDeclaration ();
				state.allowIn 	= true;

				if (init.declarations.length <= 2 && (matchKeyword ('in-array') && (arrayMode = 1) || matchKeyword ('in'))){
					lex ();
					left 		= init;
					right 		= parseExpression ();
					init 		= null;
				}
			} else {
				state.allowIn 	= false;
				init 			= parseExpression ();
				state.allowIn 	= true;

				if (matchKeyword ('in-array') && (arrayMode = 1) || matchKeyword ('in')){
					// LeftHandSideExpression
					if (!isLeftHandSide (init) && (init.type != 'SequenceExpression' || init.expressions.length != 2))
						throwError ({}, Messages.InvalidLHSInForIn);

					lex ();
					left 		= init;
					right 		= parseExpression();
					init 		= null;
				}
			}

			if (typeof left === 'undefined')
				expect (';');
		}

		if (typeof left === 'undefined'){
			if (!match (';'))
				test = parseExpression ();

			expect (';');

			if (!match (')'))
				update = parseExpression ();
		}

		expect (')');
		body = parseStatement ();

		if (arrayMode)
			if (left.type === Syntax.VariableDeclaration && left.declarations.length === 1){
				left.declarations = [ variableDeclarator (newIdentifier ()), left.declarations [0] ]
			} else if (left.type === Syntax.Identifier){
				left = variableDeclaration ([ variableDeclarator (newIdentifier ()), variableDeclarator (left) ]);
				arrayMode = 2;
			}

		if (typeof left === 'undefined'){
			return forStatement (init, test, update, body);
		} else if (left.type === Syntax.SequenceExpression && left.expressions.length === 2 || arrayMode === 2){
			temp = body;

			body = blockStatement ([ 
				expressionStatement (assignmentExpression (
						arrayMode === 2 ? left.declarations [1].id : left.expressions [1],
						memberExpression (right, arrayMode === 2 ? left.declarations [0].id : left.expressions [0], true))) ]);

			if (temp.type === Syntax.BlockStatement)
				body.body = body.body.concat (temp.body);
			else
				body.body.push (temp);

			if (arrayMode === 2)
				left.declarations.length = 1;
			else
				left = left.expressions [0];
		} else if (left.type === Syntax.VariableDeclaration && left.declarations.length === 2){
			temp = body;
			body = blockStatement ([ variableDeclaration ([ left.declarations [1] ]) ]);
			body.body [0].declarations [0].init = memberExpression (right, left.declarations [0].id, true);

			if (temp.type === Syntax.BlockStatement)
				body.body = body.body.concat (temp.body);
			else
				body.body.push (temp);

			left.declarations.length = 1;
		}

		if (arrayMode){
			if (left.type === Syntax.VariableDeclaration && !left.declarations [0].init)
				left.declarations [0].init = literal (0);

			temp = left.type === Syntax.VariableDeclaration
				? left.declarations [0].id 
				: left.type === Syntax.SequenceExpression
					? left.expressions [0]
					: left;

			if (left.type === Syntax.Identifier)
				left = assignmentExpression (left, literal (0));

			result = forStatement (
				left, 
				binaryExpression (temp, '<', memberExpression (right, 'length')), 
				unaryExpression (temp, '++', false), 
				body);
		} else 
			result = forInStatement (left, right, body);

		if (typeof temp !== 'undefined' && right.type !== Syntax.Identifier){
			var identifier = newIdentifier ();

			temp = clone (right);

			for (var n in right)
				delete right [n];

			right.type = Syntax.Identifier;
			right.name = identifier;

			return blockStatement ([
				variableDeclaration ([ variableDeclarator (right, temp) ]),
				result,
				expressionStatement (assignmentExpression (right, 'undefined'))
			]);
		}

		return result;
	}