public class Worker {
	static STATE_WAITING 	= -1,
		STATE_INITIAL 		= 0,
		STATE_STARTED 		= 1,
		STATE_COLLECTED 	= 2,
		STATE_CLASSES 		= 3,
		STATE_GENERATED 	= 4,
		STATE_FINISHED 		= 5;

	// TODO
	static params = {},
		storage = { macros: {} },
		instance;

	var mainFile 	= undefined,
		state 		= STATE_INITIAL,
		data 		= { statements: [], classes: [], initializations: [], helpers: {} },
		result;

	(path){
		mainFile = new File (path);
		instance = this;
	}

	function waitForFinish (callback){
		var interval = setInterval (lambda {
			if (fileStorage.everythingFinished ()){
				clearInterval (interval);
				callback ();
			} else if (fileStorage.has (lambda arg.state !== File.STATE_FINISHED && arg.state !== File.STATE_MACRO_WAITING) 
				&& MacroCall.waitingForCallback === 0 && MacroCall.waitingForMacro > 0){
				console.fatal ('Macro initialization failed: ' + macroStorage.requests.map (lambda '@' + arg [0]).join (', '));
			}
		}, 300);
	}

	function start (callback){
		console.assert (state == STATE_INITIAL, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		// log ('started');

		for (var file in-array File.find ('default/*') || [])
			file.process ();

		mainFile.process ();

		waitForFinish (lambda {
			fileStorage.sort ();

			// log ('files processed and sorted');
			state = STATE_STARTED;
			callback ();
		});
	}

	function collect (callback){
		console.assert (state == STATE_STARTED, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		for (var file in-array fileStorage.files){
			$.extend (data.helpers, file.helpers);
			[].push.apply (data.statements, file.parsed.body);
		}

		// log ('parsed stuff collected');
		state = STATE_COLLECTED;

		callback ();
	}

	function classes (callback){
		console.assert (state == STATE_COLLECTED, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		doClasses (data.statements, lambda (helpers){
			// log ('classes processed');
			state = STATE_CLASSES;
			$.extend (data.helpers, helpers);

			callback ();
		});
	}

	function generate (callback){
		console.assert (state == STATE_CLASSES, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		var elements 	= doHelpers (data.helpers).concat (data.statements),
			ast 		= { type: Syntax.Program, body: elements };

		Analyzer.finalAst (ast);

		// log ('js generated');
		state 			= Worker.STATE_GENERATED;
		result 			= new Generator (true).generate (ast);

		callback ();
	}

	function save (callback){
		console.assert (state == STATE_GENERATED, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		// TODO: Check if new file is overriding something important
		var saveTo = params.buildTo || mainFile.replacedExtension ('js');
		fs.writeFile (saveTo, result, lambda {
			// log ('saved');
			state = STATE_FINISHED;
			callback ();
		});
	}

	function process (callback){
		new Queue (this, Queue.MODE_SEQUENT)
			.description ('worker')
			.add (start)
			.add (collect)
			.add (classes)
			.add (generate)
			.add (save)
			.run (lambda {
				console.assert (state == STATE_FINISHED, 'Wrong state (' + state + ')');
				if (callback !== undefined)
					callback (this);
			});
	}
}

// addLog (Worker, 0, 'app');