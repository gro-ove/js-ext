	function Worker (path){
		this.path 				= path;
		this.mainFile			= undefined;
		this.state 				= Worker.STATE_INITIAL;
		this.data 				= { statements: [], classes: [], initializations: [], helpers: {} };
	}

	Worker.STATE_WAITING		= -1;
	Worker.STATE_INITIAL 		= 0;
	Worker.STATE_STARTED 		= 1;
	Worker.STATE_COLLECTED 		= 2;
	Worker.STATE_CLASSES 		= 3;
	Worker.STATE_GENERATED 		= 4;
	Worker.STATE_FINISHED 		= 5;

	addLog (Worker, 0, 'app');

	Worker.params = {};

	Worker.prototype.waitForFinish = function (callback){
		var interval = setInterval (lambda {
			if (fileStorage.everythingFinished ()){
				clearInterval (interval);
				callback ();

			} else if (fileStorage.has (lambda arg.state !== File.STATE_FINISHED && arg.state !== File.STATE_MACRO_WAITING) 
				&& MacroCall.waitingForCallback === 0 
				&& MacroCall.waitingForMacro > 0){

				console.fatal ('Macro initialization failed: ' + macroStorage.requests.map (lambda '@' + arg [0]).join (', '));
			}
		}, 100);
	}

	Worker.prototype.start = function (callback){
		console.assert (this.state == Worker.STATE_INITIAL, 'Wrong state (' + this.state + ')');
		this.state = Worker.STATE_WAITING;

		this.log ('started');

		for (var file in-array File.find ('default/*') || [])
			file.process ();

		this.mainFile = new File (this.path);
		this.mainFile.process ();

		this.waitForFinish (lambda {
			fileStorage.sort ();

			this.log ('files processed and sorted');
			this.state = Worker.STATE_STARTED;
			callback ();
		}.bind (this));
	}

	Worker.prototype.collect = function (callback){
		console.assert (this.state == Worker.STATE_STARTED, 'Wrong state (' + this.state + ')');
		this.state = Worker.STATE_WAITING;

		for (var file in-array fileStorage.files){
			$.extend (this.data.helpers, file.helpers);

			Array.prototype.push.apply (this.data.statements, file.parsed.body);
			Array.prototype.push.apply (this.data.classes, file.parsed.classes);
			Array.prototype.push.apply (this.data.initializations, file.parsed.initializations);
		}

		this.log ('parsed stuff collected');
		this.state = Worker.STATE_COLLECTED;

		callback ();
	}

	Worker.prototype.classes = function (callback){
		console.assert (this.state == Worker.STATE_COLLECTED, 'Wrong state (' + this.state + ')');
		this.state = Worker.STATE_WAITING;

		doClasses (this.data.classes, lambda (classes = [], helpers){
			this.log ('classes processed');
			$.extend (this.data.helpers, helpers);

			this.state 				= Worker.STATE_CLASSES;
			this.data.classes 	 	= classes;

			callback ();
		}.bind (this));
	}

	Worker.prototype.generate = function (callback){
		console.assert (this.state == Worker.STATE_CLASSES, 'Wrong state (' + this.state + ')');
		this.state = Worker.STATE_WAITING;

		var elements 	= doHelpers (this.data.helpers)
							.concat (this.data.statements)
							.concat (this.data.classes)
							.concat (this.data.initializations),
			ast 		= program (elements);

		// fs.writeFileSync (path.resolve (__dirname, '../stuff/ast-dump.json'), JSON.stringify (ast, null, 4));

		var result 		= convert (ast);

		this.log ('js generated');
		this.state 		= Worker.STATE_GENERATED;
		this.result 	= result;

		callback ();
	}

	Worker.prototype.save = function (callback){
		console.assert (this.state == Worker.STATE_GENERATED, 'Wrong state (' + this.state + ')');
		this.state = Worker.STATE_WAITING;

		var saveTo = Worker.params.buildTo || this.mainFile.fullpath.replace (/(\.[^\/\\\.]+)?$/, lambda arg === '.js' ? arg : '') + '.js';
		fs.writeFile (saveTo, this.result, lambda {
			this.log ('saved');
			this.state = Worker.STATE_FINISHED;
			callback ();
		}.bind (this));
	}

	Worker.prototype.process = function (callback){
		new Queue (this, Queue.MODE_SEQUENT)
			.description ('worker')
			.add (this.start)
			.add (this.collect)
			.add (this.classes)
			.add (this.generate)
			.add (this.save)
			.run (lambda {
				console.assert (this.state == Worker.STATE_FINISHED, 'Wrong state (' + this.state + ')');
				if (callback !== undefined)
					callback (this);
			});
	}