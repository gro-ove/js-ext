public class File {
	static STATE_WAITING		= -1,
		STATE_MACRO_WAITING		= -2,
		STATE_INITIAL 			= 0,
		STATE_LOADED 			= 1,
		STATE_MACROS 			= 2,
		STATE_FINISHED			= 3;

	static lookingAt;

	static find (from, child){
		if (!lookingAt)
			lookingAt = [ { root: path.resolve (__dirname, 'library') } ];

		function getByMask (temp){
			// TODO: Get by mask like folder/sub_folder_*/file (?)

			var dirname 	= path.dirname (temp),
				regExp 		= new RegExp ('^' + path.basename (temp).replace (/\*/g, '.*').replace (/\?/g, '.') + '$', 'i'),
				files 		= fs.readdirSync (dirname),
				filtered 	= files.filter (RegExp.prototype.test.bind (regExp)).map (lambda path.resolve (dirname, arg));

			return filtered;
		}

		function findInFolder (root, current = root, child){
			console.assert (current.indexOf (root) === 0, 'Invalid state');

			while (current.indexOf (root) === 0){
				var temp = path.resolve (current, child + '.jsxi'),
					match = temp.search (/[\*\?]/);

				if (match !== -1){
					var filtered = getByMask (temp);
					if (filtered.length)
						return filtered;
				} else if (fs.existsSync (temp))
					return [ temp ];

				current = path.dirname (current);
			}
		}

		if (typeof from === 'string'){
			child = from;
			from = null;
		}

		for (var entry in-array from ? [ { root: from.root, dirname: from.dirname } ].concat (lookingAt) : lookingAt){
			var temp = findInFolder (entry.root, entry.dirname, child);

			if (temp)
				return temp.map (lambda fileStorage.get (arg) || new File (entry.root, arg));
		}
	}

	var fullpath, 
		root, 
		dirname, 
		filename, 
		state = STATE_INITIAL, 
		imports = [], 
		weightCalculating = false,
		content,
		parsed,
		helpers;

	(root, fullpath){
		console.assert (!fileStorage.exists (fullpath), 'File already processed');

		if (fullpath === undefined){
			this.fullpath = path.resolve (root);
			this.root = path.dirname (this.fullpath);
		} else {
			this.fullpath = fullpath;
			this.root = root;
		}

		dirname = path.dirname (this.fullpath);
		filename = path.basename (this.fullpath);

		fileStorage.add (this);
	}

	public replacedExtension (arg){
		console.assert (typeof arg === 'string' && arg.length > 0, 'Wrong arg');
		return fullpath.replace (/(\.[^\/\\\.]+)?$/, lambda arg && arg === '.' + arg ? arg : '') + '.' + arg;
	}

	public findChild (child)
		File.find (this, child);

	public weight (){
		if (weightCalculating)
			return 0;

		weightCalculating = true;
		var result = imports.reduce (lambda (a, b) a + b.weight (), 1);
		weightCalculating = false;

		return result;
	}

	public load (callback){
		console.assert (state == STATE_INITIAL, 'Wrong state (' + state + ')');
		state = STATE_MACRO_WAITING;

		fs.readFile (fullpath, lambda (error, data){
			if (error)
				console.fatal (error);

			state 		= STATE_LOADED;
			content 	= String (data);

			// log ('loaded', content.length ? '(' + content.length + ' bytes)' : '(empty)');

			callback ();
		});
	}

	public macros (callback){
		console.assert (state == STATE_LOADED, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		macrosProcess (content, new Context (this), lambda {
			// log ('macro calls processed');

			state 		= STATE_MACROS;
			content 	= String (arg);

			callback ();
		});
	}

	public parsing (callback){
		console.assert (state == STATE_MACROS, 'Wrong state (' + state + ')');
		state = STATE_WAITING;

		jsxParse (content, { filename: filename, initializationAllowed: true }, lambda (error, parsed, helpers){
			// log ('parsing processed');

			if (error){
				// TODO
				var reportPath = Worker.instance.mainFile.replacedExtension ('jsxr'),
					reportContent = 
					   `===================================[   ERROR REPORT   ]===================================
							Error while parsing %0 (%1).

						===================================[   STACK  TRACE   ]===================================
							%2

						===================================[   SOURCE  CODE   ]===================================
						%3` (filename, fullpath, error.stack.replace (/\n/g, '\n\t'), content.split ('\n').map (lambda (string, number, array)
							repeatString (' ', 5 - String (number + 1).length) + (number + 1) + '   ' + string).join ('\n'));

				fs.writeFileSync (reportPath, reportContent);
				throw error;
			}

			state 				= STATE_FINISHED;
			this.parsed 		= parsed;
			this.helpers		= helpers;

			callback ();
		});
	}

	public process (callback){
		new Queue (this, Queue.MODE_SEQUENT)
			.description ('file process')
			.add (load)
			.add (macros)
			.add (parsing)
			.run (lambda {
				console.assert (state == STATE_FINISHED, 'Wrong state (' + state + ')');
				if (callback !== undefined)
					callback (this);
			});
	}
}

addLog (File, 1, lambda filename);