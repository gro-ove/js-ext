	function File (root, fullpath){
		console.assert (!fileStorage.exists (fullpath), 'File already processed');

		if (fullpath === undefined){
			this.fullpath 		= path.resolve (root);
			this.root 			= path.dirname (this.fullpath);
		} else {
			this.fullpath 		= fullpath;
			this.root 			= root;
		}

		this.dir 				= path.dirname (this.fullpath);
		this.filename 			= path.basename (this.fullpath);
		this.state 				= File.STATE_INITIAL;
		this.imports 			= [];
		this.weightCalculating 	= false;

		fileStorage.add (this);
	}

	File.STATE_WAITING			= -1;
	File.STATE_MACRO_WAITING	= -2;
	File.STATE_INITIAL 			= 0;
	File.STATE_LOADED 			= 1;
	File.STATE_MACROS 			= 2;
	File.STATE_FINISHED			= 3;

	addLog (File, 1, lambda this.filename);

	var lookingAt 	= [
		{ root: path.resolve (__dirname, 'library') }
	];

	File.find = function (child){
		return File.prototype.find (child);
	}

	File.prototype.find = function (child){
		function getByMask (temp){
			// TODO: Get by mask like folder/sub_folder_*/file (?)

			var dirname 	= path.dirname (temp),
				regExp 		= new RegExp ('^' + path.basename (temp).replace (/\*/g, '.*').replace (/\?/g, '.') + '$', 'i'),
				files 		= fs.readdirSync (dirname),
				filtered 	= files.filter (RegExp.prototype.test.bind (regExp)).map (lambda path.resolve (dirname, arg));

			return filtered;
		}

		function findInFolder (root, current = root, child){
			console.assert (current.indexOf (root) === 0, 'Invalid state');

			while (current.indexOf (root) === 0){
				var temp = path.resolve (current, child + '.jsxi'),
					match = temp.search (/[\*\?]/);

				if (match !== -1){
					var filtered = getByMask (temp);
					if (filtered.length)
						return filtered;
				} else if (fs.existsSync (temp))
					return [ temp ];

				current = path.dirname (current);
			}
		}

		for (var entry in-array this instanceof File ? [ { root: this.root, dir: this.dir } ].concat (lookingAt) : lookingAt){
			var temp = findInFolder (entry.root, entry.dir, child);

			if (temp)
				return temp.map (lambda fileStorage.get (arg) || new File (entry.root, arg));
		}
	}

	File.prototype.weight = function (){
		if (this.weightCalculating)
			return 0;

		this.weightCalculating = true;
		var result = this.imports.reduce (lambda (a, b) a + b.weight (), 1);
		this.weightCalculating = false;

		return result;
	}

	File.prototype.load = function (callback){
		console.assert (this.state == File.STATE_INITIAL, 'Wrong state (' + this.state + ')');
		this.state = File.STATE_MACRO_WAITING;

		fs.readFile (this.fullpath, lambda (error, data){
			if (error)
				console.fatal (error);

			this.state 		= File.STATE_LOADED;
			this.content 	= String (data);

			this.log ('loaded', this.content.length ? '(' + this.content.length + ' bytes)' : '(empty)');

			callback ();
		}.bind (this));
	}

	File.prototype.macros = function (callback){
		console.assert (this.state == File.STATE_LOADED, 'Wrong state (' + this.state + ')');
		this.state = File.STATE_WAITING;

		macrosProcess (this.content, new Context (this), lambda {
			this.log ('macro calls processed');

			this.state 		= File.STATE_MACROS;
			this.content 	= String (arg);

			callback ();
		}.bind (this));
	}

	File.prototype.parsing = function (callback){
		console.assert (this.state == File.STATE_MACROS, 'Wrong state (' + this.state + ')');
		this.state = File.STATE_WAITING;

		jsxParse (this.content, {
			filename: 				this.filename,
			initializationAllowed: 	true
		}, lambda {
			this.log ('parsing processed');

			this.state 		= File.STATE_FINISHED;
			this.parsed 	= arg;

			callback ();
		}.bind (this));
	}

	File.prototype.process = function (callback){
		new Queue (this, Queue.MODE_SEQUENT)
			.description ('file process')
			.add (this.load)
			.add (this.macros)
			.add (this.parsing)
			.run (lambda {
				console.assert (this.state == File.STATE_FINISHED, 'Wrong state (' + this.state + ')');
				if (callback !== undefined)
					callback (this);
			});
	}