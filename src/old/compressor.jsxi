// ==Jsx==
// @import utils/string.format
// ==/Jsx==

module Compressor {
	import Node, @App;
	
	var uglify    = Node.safeAccess ('uglify-js', 'js compression'),
		closure   = Node.safeAccess ('closure-compiler', 'deep js compression'),
		fibers    = Node.safeAccess ('fibers', 'deep js compression'),
		disabled  = false,
		closured  = false,
		debug     = true;

	function compressError (e){
		if (debug){
			Node.writeFile (Node.path ().resolve (App.debugFolder, 'compress-error.js'), code);
			console.error ('Saved at: "' + Node.path ().resolve (App.cacheFolder, 'compress-error.js') + '".');
		} else
			console.error (code);
		Node.fatalError ('Compress error: {0}.'.format (e), code);
	}

	function uglifyWork (code){
		var util = require ('util'),
			temp = util.error;

		util.error = lambda { 
			if (arg.indexOf ('WARN: Dropping unused function argument arg') == -1)
				console.log ('... ' + arg.replace (/^WARN/, 'Warning')); 
		};

		var result = uglify ().minify (code, { 
			fromString: true,
			warnings: !App.silenceMode
		}).code;

		util.error = temp;
		return result;
	}
	
	function closureWork (code){
		var fiber = fibers ().current,
			result = code;

		try {
			closure ().compile (code, {}, lambda (error, data, extra){
				if (error){
					compressError (error, code);
				} else {
					if (!App.silenceMode && extra)
						console.log (extra);
					result = data.trim ();
				}

				fiber.run ();
			});
			fibers ().yield ();
		} catch
			Node.fatalError ('Compress error: {0} (please, check your JRE).'.format (e));

		return result;
	}

	export function work (code){
		if (disabled)
			return code;
		else if (closured)
			return closureWork (code);
		else
			return uglifyWork (code);
	}
	
	export function disable ()
		disabled = true;

	export function useClosure ()
		closured = true;
}