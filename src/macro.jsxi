	function Macro (name, level, context, macroArgs, macroBody){
		var splitted 			= name.split (':');
		this.name 				= splitted [0];
		this.type 				= splitted [1] || null;
		
		if (!macroBody){		
			macroBody 			= macroArgs;
			macroArgs 			= null;
		}		
				
		this.level 				= level;
		this.context 			= context;
		this.rawBody 			= String (macroBody);
		this.localStorage 		= {};

		this.arguments 			= macroArgs === null 
										? [ { name: 'arg', type: null } ] 
										: macroArgs.map (lambda arg.match (/^(.+)\:([^\:]+)$/) 
											? { name: RegExp.$1, type: RegExp.$2 } 
											: { name: arg, type: null }); 

		if (this.arguments.length > 0){
			var last 			= this.arguments [this.arguments.length - 1];
			this.asyncMode 		= last.name === 'callback' && last.type === null || last.type === 'callback';
		} else 
			this.asyncMode 		= false;
	};

	addLog (Macro, 3, lambda '@' + this.name);

	Macro.ReturnType = { 
		Void: 			'void',
		Raw: 			'raw',
		RawNoMacros: 	'raw-nm',
		Boolean: 		'boolean',
		Number: 		'number',
		String: 		'string',
		Object: 		'object',
	};

	Macro.Defaults = {
		fs: 			fs,
		path: 			path,
		params: 		paramsManager,
		ReturnType: 	Macro.ReturnType
	};

	Macro.globalStorage = {};

	Macro.prototype.defaults = function (context){
		var result 	= {},
			obj 	= {
				name: 			this.name,
				context: 		context,
				macroContext: 	this.context
			};

		for (var key, value in Macro.Defaults){
			if (typeof value === 'function')
				result [key] = value.call (obj);
			else
				result [key] = value;
		}

		return result;
	}

	Macro.prototype.initialize = function (callback){
		function macroCalls (macroBody){
			var used = [],
				lastIdentifier,
				liteParser,
				name,
				found,
				temp;

			if (macroBody.search (/@[_$a-zA-Z]/) !== -1){
				lastIdentifier 	= 0;
				liteParser 		= new LiteParser (macroBody)
					.on ('//', lambda this.findSimple ('\n', '\r', LiteParser.EOF))
					.on ('/*', lambda this.findSimple ('*/'))
					.on ('\'', '"', '`', lambda {
						while (temp = liteParser.findSimple ('\\' + arg.value, arg.value))
							if (temp.value === arg.value)
								return true;
						return false;
					});

				while (found = liteParser.findNext (/@([_$a-zA-Z][_$a-zA-Z0-9\.\-]*)/)){
					while (macroBody.indexOf (name = '_' + (lastIdentifier ++).toString (32)) !== -1);
					used.push ({ name: name, macro: found.raw [1] });

					temp = liteParser.whatNext (/[^\s]/);
					if (!temp || temp.value !== '(')
						name = name + ' ()';

					liteParser.update (macroBody = macroBody.substr (0, found.index) + name + macroBody.substr (liteParser.index), liteParser.index + name.length - found.value.length);
				}
			}

			return {
				used: 	used,
				body: 	macroBody
			};
		}

		if (this.callee){
			callback ();
			return;
		}

		var phase 		= macroCalls (this.rawBody),
			converted 	= convert (phase.body, { filename: 'macro', insertReturn: true }),
			variables 	= [],
			queue 		= new Queue (macroStorage, Queue.MODE_PARALLEL).description ('macros inside other macro');

		variables.push ('context = this.context');
		variables.push ('macroContext = this.macroContext');
		variables.push ('global = this.global');
		variables.push ('local = this.local');
		variables.push ('require = this.require');
		variables.push ('defineMacro = this.defineMacro.bind (this)');

		for (var key in Macro.Defaults)
			variables.push (key + ' = this.defaults.' + key);

		for (var entry in-array phase.used){
			queue.add (macroStorage.get, entry.macro, this.level, this.context);
			variables.push (entry.name + ' = function (){ return this.macros.' + entry.macro + '.call (this.context, [].slice.call (arguments)) }.bind (this)');
		}

		this.macros 	= {};
		this.debug 		= (variables.length ? 'var ' + variables.join (', ') + ';\n' : '') + converted;
		this.callee 	= new Function (this.arguments.map (lambda arg.name).join (','), this.debug);

		queue.run (lambda {
			arg.map (lambda arg.result [0]).forEach (lambda (other){
				this.log ('found @' + other.name + ' for using inside');
				this.macros [other.name] = other;
			}.bind (this));

			this.log ('initialized');
			callback ();
		}.bind (this));
	}

	Macro.prototype.call = function (context, args){
		console.assert (this.callee, 'Macro is not initialized');
		console.assert (args instanceof Array, 'Wrong argument');
		console.assert (context instanceof Context, 'Context required');

		var that = this,
			object = { 
				defaults: 		this.defaults (context), 
				macros: 		this.macros,
				macroContext: 	this.context,
				context: 		context,
				global: 		Macro.globalStorage,
				local: 			this.localStorage,

				require: 		lambda (arg, from) 
									require (path.resolve (that.context.file.dirname, from || '.', 'node_modules', arg)),

				defineMacro: 	lambda (name, arguments, body){
									if (body === undefined){
										body = arguments;
										arguments = [];
									}
									
									macroStorage.add (new Macro (
										name, 
										that.level, 
										that.context, 
										typeof arguments === 'string' 
											? arguments.split (',').map (Function.prototype.call.bind (String.prototype.trim))
											: arguments, 
										body))
								}
			};

		try {
			for (var id, arg in-array this.arguments)
				if (arg.type === 'callback' && typeof args [id] !== 'function')
					throw new Error ('Wrong arg');

			return this.callee.apply (object,
				args.map (lambda (value, pos){
					switch (this.arguments [pos] && this.arguments [pos].type){
						case 'boolean': 	return !!value;
						case 'string': 		return String (value);
						case 'number': 		return +value;
						case 'object': 		return typeof value === 'object' ? value : null;
						default: 			return value;
					}
				}.bind (this)));
		} catch {
			if (e.name === 'MacroError')
				throw e;
			else
				throw new MacroError (this.name, args, context, e);
		}
	}

	function MacroError (macroName, callArgs, context, originalError, message){
		var result = new Error ('@%0%1 [%2]:\n\t%3' (
			macroName, callArgs ? '(' + [].map.call (callArgs, lambda {
				var j = JSON.stringify (arg) || '' + arg;
				return j.length > 10 ? j.slice (0, 7) + '...' : j;
			}).join (', ') + ')' : '(?)', context,
			originalError && originalError.stack ? originalError.stack.replace (/\n/g, '\n\t') : originalError || '<unknown error>'));
		result.name 	= 'MacroError';
		return result;
	};
	