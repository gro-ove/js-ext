module Converter {
	import Node;
	
	var moduleName = '__m',
		minimize   = Node.safeAccess ('minimize', 'compress html'),
		less       = Node.safeAccess ('less', 'converting less to css'),
		fibers     = Node.safeAccess ('fibers', 'converting less to css'),
		minimizeInstance,
		modules,
		lessParams,
		hypParams;
			
	function jsonFunction (name, content, params = [])
		return { type: 'PropertyAssignment', name: name, 
			value: { type: 'Function', name: null, params: params, elements: content }};
		
	var types = {
		Function: 
			lambda {		
				var initialize = [];
				return {
					type: 'Function',
					name: arg.name,
					exportFlag: arg.exportFlag,
					params: arg.params.map (lambda
							if (arg && arg.type == 'IdentifierWithDefault'){
								initialize.push ({
									type: 'IfStatement',
									condition: {
										type: 'BinaryExpression', operator: '===',
										left:  { type: 'Variable', name: arg.identifier },
										right: { type: 'Variable', name: 'undefined' }
									},
									ifStatement: {
										type: 'ExpressionStatement',
										value: {
											type: 'AssignmentExpression', operator: '=',
											left: { type: 'Variable', name: arg.identifier },
											right: clone (arg.value)
										}
									},
									elseStatement: null
								});
								return arg.identifier;
							} else
								return arg;
						),
					elements: initialize.length ? initialize.concat (clone (arg.elements)) : clone (arg.elements)
				}
			},
		
		Lambda:
			lambda types.Function ({
				type: 'Function',
				name: null,
				params: arg.params.length == 0 ? ['arg'] : arg.params,
				elements: arg.element.type == 'Block' 
					? arg.element.statements 
					: [ arg.element.type == 'ExpressionStatement' 
						? { type: 'ReturnStatement', value: clone (arg.element.value) } 
						: arg.element ]
			}),
		
		StringLiteral: 
			lambda (arg, file){
				var result;
				
				function parseLess (data){
					var fiber = fibers ().current,
						result;
				
					try {
						new (less ().Parser)({ 
							paths: [Node.path ().dirname (file), Node.resolve ('includes')], 
							filename: file 
						}).parse ('@import "__js_ext_utils.less";\n' + data, lambda (e, tree){
							if (e)
								Node.fatalError ('Error at LESS parsing:', e);
							result = tree.toCSS ({ compress: true });
							fiber.run ();
						});
					} catch
						Node.fatalError ('Error at LESS parsing: ', e);
						
					fibers ().yield ();
					return result;
				}
				
				switch ((arg.special || '').match (/^[a-z]*/)[0]){
					case 'h':
						var a = arg.value.replace (/<([a-z]+)(\s[^>]+?)?\s*\/>/g, '<$1$2></$1>');
						if (!minimizeInstance)
							minimizeInstance = new (minimize ())({
								empty: true, cdata: true, comments: false, spare: true, quotes: true 
							});
						minimizeInstance.parse (a, lambda (error, data) result = data);
						break;
					case 'c':
						result = arg.value.replace (/\s+/g, ' ').replace (/\s*([{};:])\s*/g, '$1').trim ();
						break;
					case 's':
						result = arg.value.replace (/\s+/g, ' ').trim ();
						break;
					case 'l':
						result = parseLess (arg.value);
						break;
					case 'lp':
						var variables = {}, raw = arg.value;
						
						lessParams = true;
						
						var generators = {
							def:    lambda (1 + Math.random ()) * 10000 | 0,
							size:   lambda this.def () + 'px',
							radius: lambda this.size (),
							per:    lambda this.def () + '%',
							time:   lambda this.def () + 's',
							color:  lambda '#' + (Math.random () * 0xefffff + 0x100000 | 0).toString (16),
							text:   lambda '"' + (Math.random () * 1e18).toString (32) + '"',
							font:   lambda this.text (),
						}
						
						result = parseLess (raw.replace (/@([A-Z0-9_]+?)(?:_([A-Z]+))?([^A-Z0-9_])/g, 
							lambda (match, name, type, postfix){
								var key   = '@' + name + (type ? '_' + type : ''), 
									value = variables [key];
								
								if (!value){
									var generator = generators [type] || generators.def;
									
									do {
										value = generator ();
									} while (raw.indexOf (value) != -1);
									
									variables [key] = value;
								}
								
								return value + postfix;
							}));
						
						for (var name, value in variables)
							result = result.split (value).join (name);
							
						break;
					default:
						result = arg.value;
				}
				
				return { type: "StringLiteral", value: result };
			},
			
		Module:
			lambda {
				modules = true;
				
				var getImports 		   = [], 
					setupImports 	   = [],
					exported 		   = [], 
					variableInitialize = [],
					newElements 	   = [],
					hasInit            = false;
		
					for (var i = 0; i < arg.elements.length; i ++){
						var e = arg.elements [i];
						
						if (e.type === 'ImportStatement'){
							newElements.push ({
								type: 'VariableStatement',
								declarations: (lambda {
									for (var k = 0; k < arg.length; k ++){
										var clear = arg [k][0] === '@' ? arg [k].slice (1) : arg [k];
										getImports.push ({ type: 'StringLiteral', value: arg [k] });
										setupImports.push ({
											type: 'ExpressionStatement',
											value: {
												type: 'AssignmentExpression', operator: '=',
												left: { type: 'Variable', name: clear },
												right: { 
													type: 'PropertyAccess', 
													base: { type: 'Variable', name: "__" },
													name: { type: 'NumericLiteral', value: setupImports.length }
												}
											}
										});
										
										arg [k] = { type: 'VariableDeclaration', name: clear, value: null }
									}
									
									return arg;
								})(clone (e.declarations))
							});
						} else {
							var newE = clone (e);
							
							if (newE.type == 'Function' && newE.name == 'init')
								hasInit = true;
							else if (newE.type === 'Function' && newE.exportFlag)
								exported.push ({
									type: 'PropertyAssignment',
									name: newE.name,
									value: { type: 'Variable', name: newE.name }
								});
							else if (newE.type === 'VariableStatement')
								for (var k = 0; k < newE.declarations.length; k ++){
									if (newE.exportFlag)
										exported.push ({
											type: 'GetterDefinition',
											name: newE.declarations [k].name,
											body: [{ type: 'ReturnStatement', value: { type: 'Variable', name: newE.declarations [k].name }}]
										});
									if (newE.declarations [k].value !== null){
										variableInitialize.push ({
											type: 'ExpressionStatement',
											value: {
												type: 'AssignmentExpression', operator: '=',
												left: { type: 'Variable', name: newE.declarations [k].name },
												right: clone (newE.declarations [k].value)
											}
										});
										
										newE.declarations [k].value = null;
									}
								}
							
							newElements.push (newE);
						}
					}
					
					exported = exported.length ? [{
						type: 'PropertyAssignment',
						name: 'e',
						value: { type: 'ObjectLiteral', properties: exported }
					}] : [];
					
					if (hasInit)
						exported.push ({
							type: 'PropertyAssignment',
							name: 'i',
							value: { type: 'Variable', name: 'init' }
						});
					
					if (getImports.length)
						exported.push (jsonFunction ('g', [{ 
							type: 'ReturnStatement', 
							value: { type: 'ArrayLiteral', elements: getImports }
						}]),
						jsonFunction ('s', setupImports, [ '__' ]));
					
					if (variableInitialize.length)
						exported.push (jsonFunction ('v', variableInitialize));		
					
					newElements.push ({ type: 'ReturnStatement', value: { type: 'ObjectLiteral', properties: exported }});
					
					return {
						type: 'ExpressionStatement',
						value: {
							type: 'FunctionCall', name: { type: 'Variable', name: moduleName },
							arguments: [
								{ type: 'StringLiteral', value: clone (arg.identifier) },
								{ type: 'Function', name: null, params: [], elements: newElements }
							]
						}
					}
				}
	};
	
	function clone (obj)	
		if (typeof obj !== 'object' || !obj){
			return obj;
		} else if (obj.indexOf){
			var r = [];
			for (var i = 0; i < obj.length; i ++)
				r.push (clone (obj [i]));
			return r;
		} else if (types [obj.type]){
			return types [obj.type](obj);
		} else {
			var r = {};
			for (var n in obj)
				r [n] = clone (obj [n]);
			return r;
		}
	
	export function work (parsed){
		modules    = false;
		lessParams = false;
		hypParams  = false;
	
		return {
			tree:       clone (parsed),
			modules:    !!modules,
			lessParams: !!lessParams,
			hypParams:  !!hypParams
		};
	}
	
	export function finish (file){
		for (var key, value in shameOnMeDogNail){
			var valueString = value ();
			if (!valueString)
				return null;
			file = file.replace (key, valueString);
		}
		
		return file;
	}
}