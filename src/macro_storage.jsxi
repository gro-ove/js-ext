	var macroStorage = new MacroStorage ();

	function MacroStorage (){
		this.macros 	= {};
		this.requests 	= [];
	}

	addLog (MacroStorage, 2, 'storage');

	MacroStorage.prototype.add = function (macro){
		this.log ('@' + macro.name + (macro.level ? ' (at ' + macro.level + ')' : '') + ' added');

		if (!this.macros [macro.name])
			this.macros [macro.name] = [ macro ];
		else 
			this.macros [macro.name].push (macro);

		for (var pos, request in-array this.requests)
			if (request [0] === macro.name && this.get (request))
				this.requests.splice (pos --, 1);
	}

	MacroStorage.prototype.get = function (name, level, context, callback){
		var result 			= undefined,
			max  			= -1,
			requestMode 	= typeof name !== 'string',
			temp;

		if (requestMode){
			callback 	= name [3]; // For queue from Macro.initialize ()
			context 	= name [2]; // TODO: Find another way
			level 		= name [1];
			name 		= name [0];
		} else
			this.log ('requested @' + name + (level ? ' (at ' + level + ')' : '') + '');

		if (this.macros [name])
			for (var macro in-array this.macros [name])
				if (macro.level.length >= max && 
					macro.level.length <= level.length && 
					level.substring (0, macro.level.length) === macro.level){

					result 	= macro;
					max 	= macro.level.length;
				}

		if (result !== undefined){
			result.initialize (lambda callback (result));

			if (requestMode)
				return true;
		} else if (!requestMode)
			this.requests.push (arguments);
	}