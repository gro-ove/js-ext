	function MacroCall (name, arguments, level, context, replacement){
		this.name 				= name;
		this.arguments 			= arguments;
		this.level 				= level;
		this.context 			= context;
		this.state 				= MacroCall.STATE_INITIAL;
		this.replacement 		= replacement;
		this.macro 				= undefined;
		this.result 			= undefined;
	}

	MacroCall.STATE_WAITING 	= -1;
	MacroCall.STATE_INITIAL 	= 0;
	MacroCall.STATE_CONNECTED 	= 1;
	MacroCall.STATE_READY 		= 2;
	MacroCall.STATE_CALLED 		= 3;
	MacroCall.STATE_FINISHED 	= 4;

	MacroCall.waitingForCallback 	= 0;
	MacroCall.waitingForMacro 		= 0;

	addLog (MacroCall, 2, lambda 'call (@' + this.name + ')');

	MacroCall.prototype.findMacro = function (callback){
		console.assert (this.state == MacroCall.STATE_INITIAL, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		MacroCall.waitingForMacro ++;

		macroStorage.get (this.name, this.level, lambda {
			if (arg == null)
				throw new MacroNotFoundError (this.name);

			this.log ('macro @' + this.name + ' found');

			this.state 		= MacroCall.STATE_CONNECTED;
			this.macro 		= arg;

			MacroCall.waitingForMacro --;
			callback ();
		}.bind (this));
	}

	MacroCall.prototype.prepareArguments = function (callback){
		console.assert (this.state == MacroCall.STATE_CONNECTED, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		function cast (argument, value, callback){
			function nextStep (){
				var data;

				try {
					eval ('data = ' + convert (arg, { filename: 'macro arg' }));
					callback (data);
				} catch 
					console.fatal (2, 'Error at argument preparing:\n' + (value || '< empty string >') + ' â‡’ ' + (arg || '< empty string >') + '\n\n' + e.stack);
			}

			switch (argument && argument.type){
				case 'raw-nm':
					callback (value);
					break;
				case 'raw':
					macrosProcess (value, this.level, this.context, callback);
					break;
				default:
					macrosProcess (value, this.level, this.context, nextStep);
			}
		}

		var queue = new Queue (this, Queue.MODE_PARALLEL).description ('macro call arguments prepare');

		for (var i, arg in-array this.arguments)
			queue.add (cast, this.macro.arguments [i], arg);

		queue.run (lambda {
			this.log ('arguments ready');

			this.state 		= MacroCall.STATE_READY;
			this.arguments 	= arg.map (lambda arg.result [0]);

			callback ();
		});
	}

	MacroCall.prototype.realMacroCall = function (callback){
		console.assert (this.state == MacroCall.STATE_READY, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		MacroCall.waitingForCallback ++;

		var resultHandler = function (answer){
			if (this.result !== undefined)
				throw new Error ('Callback already called');
			
			this.log ('call complete');

			if (answer === undefined)
				answer = '';

			this.state 		= MacroCall.STATE_CALLED;
			this.result 	= answer;

			MacroCall.waitingForCallback --;
			callback ();
		}.bind (this);

		if (this.macro.asyncMode){
			var temp = this.arguments,
				delta = this.macro.arguments.length - (temp.length + 1);

			if (delta < 0)
				temp = temp.slice (0, delta);
			else if (delta > 0)
				temp = temp.concat (new Array (delta));

			temp.push (resultHandler);
			this.macro.call (this.context, temp);
		} else 
			resultHandler (this.macro.call (this.context, this.arguments));
	}

	MacroCall.prototype.processResult = function (callback){	
		console.assert (this.state == MacroCall.STATE_CALLED, 'Wrong state (' + this.state + ')');
		this.state 		= MacroCall.STATE_WAITING;

		var doMacros 	= false, 
			result 		= this.result,
			type 		= this.macro.type;

		if (type === null && result && typeof result.type === 'string'){
			type 		= result.type;
			result 		= result.value;
		}

		if (type !== null){
			switch (type){
				case 'void':
					result = '';
					break;
				case 'raw':
					doMacros = true;
					result = String (result);
					break;
				case 'raw-nm':
					result = String (result);
					break;
				case 'boolean':
					result = result ? 'true' : 'false';
					break;
				case 'number':
					result = +result;
					break;
				case 'object':
					if (typeof result !== 'object')
						throw new Error ('Type mismatch (waiting for object, but get ' + typeof result + ')');
					doMacros = true;
					result = JSON.stringify (result);
					break;
				case 'string':
					doMacros = true;
					result = JSON.stringify (String (result));
					break;
				default:
					throw new Error ('Invalid macro type (' + this.name + ', ' + this.macro.type + ')');
			}
		} else if (result !== undefined){
			doMacros = true;
			result = String (result);
		} else 
			result = '';

		var resultHandler = function (result){
			this.log ('result processed');
			this.state 		= MacroCall.STATE_FINISHED;
			this.result 	= result;

			callback ();
		}.bind (this);

		if (doMacros)
		 	macrosProcess (result, this.level, this.context, resultHandler);
		else
			resultHandler (result);
	}

	MacroCall.prototype.process = function (callback){
		new Queue (this, Queue.MODE_SEQUENT)
			.description ('macro call process')
			.add (this.findMacro)
			.add (this.prepareArguments)
			.add (this.realMacroCall)
			.add (this.processResult)
			.run (lambda {
				console.assert (this.state == MacroCall.STATE_FINISHED, 'Wrong state (' + this.state + ')');
				if (callback !== undefined)
					callback (this.result);
			});
	}

	function MacroNotFoundError (name, args, parent){
		this.name 		= 'MacroNotFoundError';
		this.macroName 	= name;
		this.message 	= 'Macro @' + name + ' not found';
	};

	MacroNotFoundError.prototype = Error.prototype;