	function MacroCall (name, arguments, level, context, replacement){
		this.name 				= name;
		this.arguments 			= arguments;
		this.level 				= level;
		this.context 			= context;
		this.state 				= MacroCall.STATE_INITIAL;
		this.replacement 		= replacement;
		this.macro 				= undefined;
		this.result 			= undefined;
	}

	MacroCall.STATE_WAITING 	= -1;
	MacroCall.STATE_INITIAL 	= 0;
	MacroCall.STATE_CONNECTED 	= 1;
	MacroCall.STATE_READY 		= 2;
	MacroCall.STATE_CALLED 		= 3;
	MacroCall.STATE_FINISHED 	= 4;

	MacroCall.waitingForCallback 	= 0;
	MacroCall.waitingForMacro 		= 0;

	addLog (MacroCall, '-', lambda 'call (@' + this.name + ')');

	MacroCall.prototype.findMacro = function (callback){
		console.assert (this.state == MacroCall.STATE_INITIAL, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		MacroCall.waitingForMacro ++;

		macroStorage.get (this.name, this.level, lambda {
			if (arg == null)
				throw new MacroNotFoundError (this.name);

			this.log ('macro found');

			this.state 		= MacroCall.STATE_CONNECTED;
			this.macro 		= arg;

			MacroCall.waitingForMacro --;
			callback ();
		}.bind (this));
	}

	MacroCall.prototype.prepareArguments = function (callback){
		console.assert (this.state == MacroCall.STATE_CONNECTED, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		function cast (value, callback){
			if (value.match (/^((\d+|\d*\.\d+)(e[+-]?\d+)?|0x[\da-f]+)$/i))
				return +value;

			macrosProcess (value, this.level, this.context, lambda {
				var data;

				try {
					eval ('data = ' + convert (arg, 'macro arg'));
					callback (data);
				} catch {
					// TODO: cool errors handling
					console.log ('FAILED AT:\n' + (value || '< EMPTY STRING >') + '\nWHAT HAS BEEN TRANSFORMED INTO:\n' + (arg || '< EMPTY STRING >'));
					throw e;
				}
			});
		}

		var queue = new Queue (this, Queue.MODE_PARALLEL).description ('macro call arguments prepare');

		for (var arg in-array this.arguments)
			queue.add (cast, arg);

		queue.run (lambda {
			this.log ('arguments ready');

			this.state 		= MacroCall.STATE_READY;
			this.arguments 	= arg.map (lambda arg.result [0]);

			callback ();
		});
	}

	MacroCall.prototype.realMacroCall = function (callback){
		console.assert (this.state == MacroCall.STATE_READY, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		MacroCall.waitingForCallback ++;

		var resultHandler = function (answer){
			if (this.result !== undefined)
				throw new Error ('Callback already called');

			if (answer === undefined)
				answer = '';

			this.state 		= MacroCall.STATE_CALLED;
			this.result 	= answer;

			MacroCall.waitingForCallback --;
			callback ();
		}.bind (this);

		if (this.macro.asyncMode)
			this.macro.call (this.context, this.arguments.concat ([ resultHandler ]));
		else 
			resultHandler (this.macro.call (this.context, this.arguments));
	}

	MacroCall.prototype.processResult = function (callback){	
		console.assert (this.state == MacroCall.STATE_CALLED, 'Wrong state (' + this.state + ')');
		this.state = MacroCall.STATE_WAITING;

		var doMacros = true, 
			result = this.result;

		if (result === null){
			result = '';
		} else if (typeof result !== 'object'){
			result = '' + result;
		} else if (result instanceof String){
			result = JSON.stringify ('' + result);
		} else 
			switch (result && result.type){
				case Macro.ReturnType.Raw:
					doMacros = false;
					result = result.value;
					break;

				case Macro.ReturnType.RawWithMacros:
					result = result.value;
					break;

				case Macro.ReturnType.Object:
					// TODO: optimized version

				case Macro.ReturnType.String:
					if (!result.value)
						throw new Error ('Empty macro @' + this.name + ' result (use "null" or "undefined" for this)');

					result = JSON.stringify (result.value);
					break;

				case Macro.ReturnType.SourceTree:
				default:
					throw new Error ('Not implemented (' + this.name + ')');
			}

		var resultHandler = function (result){
			this.state 		= MacroCall.STATE_FINISHED;
			this.result 	= result;

			callback ();
		}.bind (this);

		if (doMacros)
		 	macrosProcess (result, this.level, this.context, resultHandler);
		else
			resultHandler (result);
	}

	MacroCall.prototype.process = function (callback){
		new Queue (this, Queue.MODE_SEQUENT)
			.description ('macro call process')
			.add (this.findMacro)
			.add (this.prepareArguments)
			.add (this.realMacroCall)
			.add (this.processResult)
			.run (lambda {
				console.assert (this.state == MacroCall.STATE_FINISHED, 'Wrong state (' + this.state + ')');
				if (callback !== undefined)
					callback (this.result);
			});
	}

	function MacroNotFoundError (name, args, parent){
		this.name 		= 'MacroNotFoundError';
		this.macroName 	= name;
		this.message 	= 'Macro @' + name + ' not found';
	};

	MacroNotFoundError.prototype = Error.prototype;