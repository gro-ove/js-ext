	function Queue (object = null, mode = Queue.MODE_SEQUENT){
		if (typeof object === 'string'){
			mode 			= object;
			object 			= null;
		}

		console.assert (mode, 'Wrong mode');

		this.total 			= 0;
		this.finished 		= 0;
		this.results 		= [];
		this.mode 			= mode;
		this.object 		= object;
		this.delayed 		= [];
		this._description 	= '[ unnamed ]';
	}

	Queue.MODE_SEQUENT		= 'MODE_SEQUENT';
	Queue.MODE_PARALLEL 	= 'MODE_PARALLEL';

	Queue.prototype.description = function (description){
		this._description = description;
		return this;
	}

	Queue.prototype.complete = function (id, args, data){
		if (id !== undefined){
			console.assert (!this.results [id], 'Already returned (at ' + this._description + ')');

			this.finished ++;
			this.results [id] = {
				result: 	args instanceof Array ? args : [].slice.call (args),
				data: 		data
			};
		}

		if (this.finished === this.total && this.callback){
			console.assert (!this.done, 'Already finished (at ' + this._description + ')');

			this.callback.call (this.object, this.results);
			this.done = true;
		}

		if (this.mode === Queue.MODE_SEQUENT && this.finished < this.total && this.finished == this.results.length){
			console.assert (typeof this.delayed [this.finished] === 'function', 'Delayed call missing');
			this.delayed [this.finished]();
		}
	}

	Queue.prototype.makeCall = function (fn, args, data){
		var id 		= this.total ++,
			done 	= false;

		args.push (lambda {
			console.assert (!done, 'Already returned (at ' + this._description + ')');
			done = true;

			this.complete (id, arguments, data);
		}.bind (this));

		return lambda {
			this.results [id] = undefined;
			var result = fn.apply (this.object, args);

			if (result !== undefined){
				console.assert (!done, 'Already returned in callback (at ' + this._description + ')');
				done = true;

				this.complete (id, [ result ], data);
			}
		}.bind (this);
	}

	Queue.prototype.add = function (data, fn){
		var args;

		if (typeof data === 'function'){
			args 	= [].slice.call (arguments, 1);
			fn 		= data;
			data 	= undefined;
		} else 
			args 	= [].slice.call (arguments, 2);

		console.assert (typeof fn === 'function', 'Invalid argument (at ' + this._description + ')');

		var call = this.makeCall (fn, args, data);

		if (this.mode === Queue.MODE_PARALLEL || this.mode === Queue.MODE_SEQUENT && this.finished == this.results.length){
			call ();
		} else {
			this.delayed [this.total - 1] = call;
		}

		return this;
	}

	Queue.prototype.run = function (callback){
		console.assert (!this.callback, 'Already runned (at ' + this._description + ')');
		console.assert (typeof callback === 'function', 'Invalid argument (at ' + this._description + ')');

		this.callback = callback;
		this.complete ();

		return this;
	}