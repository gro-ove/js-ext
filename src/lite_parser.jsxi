	function LiteParser (data, index = 0){
		this.data 		= data;
		this.index 		= index;
		this.debugMode 	= false;
		this.binded 	= [];
	}

	LiteParser.EOF = 1;

	LiteParser.prototype.__defineGetter__ ('current', lambda this.data [this.index]);

	LiteParser.prototype.replace = function (from, to, by = ''){
		console.assert (from <= to, 'Invalid args');

		if (typeof by !== 'string')
			by = '' + by;

		var delta = by.length - (to - from);

		if (this.index >= to)
			this.index += delta;
		else if (this.index > from)
			this.update (from);

		this.update (this.data = this.data.substr (0, from) + by + this.data.substr (to));

		return delta;
	}

	LiteParser.prototype.substring = function (from, to){
		return this.data.substring (from, to);
	}

	Object.defineProperty (LiteParser.prototype, 'lineNumber', {
		get: function (){
			var result = 1;

			for (var i = 0, d = this.data, n = Math.min (d.length, this.index); 
				i < n; i ++)
				if (d [i] === '\n')
					result ++;

			return result;
		}
	});

	LiteParser.prototype.getPosition = function (data, delta)
		return {
			index: 			this.index,
			lineNumber: 	this.lineNumber
		}

	LiteParser.prototype.update = function (data, index){
		if (typeof data === 'string')
			this.data = data;

		if (typeof index === 'number')
			this.index = index;
		else if (typeof data === 'number')
			this.index = data;

		return this;
	}

	LiteParser.prototype.on = function (){
		var args = [].slice.call (arguments),
			comment,
			handler;

		if (typeof args [args.length - 2] === 'function')
			comment = args.pop ();

		handler = args.pop ();

		for (var entry in-array args)
			this.binded.push ({ match: entry, handler: handler, comment: comment });
		
		return this;
	}

	LiteParser.prototype.debug = function (from, to){
		this.debugMode = true;
		return this;
	}

	LiteParser.prototype.findSimple = function (){
		var value = { index: Number.POSITIVE_INFINITY };

		for (var id, arg in-array arguments)
			if (arg === LiteParser.EOF){
				if (value.index === Number.POSITIVE_INFINITY)
					value = {
						id: 	id,
						index: 	this.data.length,
						value: 	''
					};
			} else {
				var index = this.data.indexOf (arg, this.index);

				if (index !== -1 && index < value.index)
					value = {
						id: 	id,
						index: 	index,
						value: 	arg
					};
			}

		if (value.index === Number.POSITIVE_INFINITY){
			return null;
		} else {
			this.index = value.index + value.value.length;
			return value;
		}
	}

	LiteParser.prototype.findNext = function (){
		return this.innerFindNext (arguments);
	}

	LiteParser.prototype.whatNext = function (){
		return this.innerFindNext (arguments, true);
	}

	LiteParser.prototype.innerFindNext = function (args, fixedMode = false){
		console.assert (args && typeof args.length === 'number', 'Invalid argument type');

		function indexOfExt (str, what, pos, id)
			if (what === LiteParser.EOF){
				return {
					id: 	id,
					index: 	str.length,
					value:  what
				};
			} else if (what instanceof RegExp){
				var temp = str.substring (pos).match (what);
				return {
					id: 	id,
					index: 	temp ? temp.index + pos : -1,
					value: 	temp ? temp [0] : null,
					raw: 	temp
				};
			} else if (typeof what === 'string'){
				return {
					id: 	id,
					index: 	str.indexOf (what, pos),
					value: 	what
				};
			} else
				console.assert (true, 'Invalid argument type');

		var value 		= { index: Number.POSITIVE_INFINITY },
			oldIndex 	= this.index,
			bindedObj,
			result,
			temp;

		for (var i, arg in-array this.binded){
			temp = indexOfExt (this.data, arg.match, this.index, i);

			if (temp.index !== -1 && temp.index < value.index){
				value = temp;
				bindedObj = arg;
			}
		}

		for (var i, arg in-array args){
			temp = indexOfExt (this.data, arg, this.index, i);

			if (temp.index !== -1 && temp.index < value.index){
				value = temp;
				bindedObj = null;
			}
		}

		if (value.index === Number.POSITIVE_INFINITY)
			return null;

		this.moveTo (value);

		if (!bindedObj){
			result = value;
		} else if (this.debugMode){
			var from = this.lineNumber, 
				fromIndex = this.index,
				temp = bindedObj.handler.call (this, value),
				to = this.lineNumber,
				toIndex = this.index,
				log;

			if (bindedObj.comment){
				log = '[LiteParser] ' 
					+ (
						typeof bindedObj.comment === 'string' 
						? bindedObj.comment
						: bindedObj.comment.name
					) 
					+ ' at ' + from + ' (' + fromIndex + ':' + toIndex + '): ' 
					+ (
						typeof bindedObj.comment === 'string' 
						? this.data.substring (fromIndex, toIndex)
						: bindedObj.comment.call (this, fromIndex, toIndex, value)
					).replace (/[\n\r]+/g, '\\n');

				if (log.length > 100)
					log = log.substr (0, 48) + '...' + log.slice (-49);

				console.log (log);
			}

			result = temp ? this.innerFindNext (args, fixedMode) : null;
		} else 
			result = bindedObj.handler.call (this, value) ? this.innerFindNext (args, fixedMode) : null;


		if (fixedMode)
			this.index = oldIndex;

		return result;
	}

	LiteParser.prototype.moveTo = function (arg){
		this.index = arg.index + arg.value.length;
	}

	LiteParser.prototype.findHere = function (arg){
		var args 		= [].slice.call (arguments, arg instanceof Array ? 1 : 0),
			operators 	= arg instanceof Array ? arg : [ '(', '{', '[' ],
			others 		= { '(': ')', '{': '}', '[': ']' },
			found, 
			temp;

		while (found = this.innerFindNext (args.concat (operators))){
			temp = operators.indexOf (found.value);
			if (operators.indexOf (found.value) !== -1){
				console.assert (others [found.value], 'Pair for ' + found.value + ' not found');
				this.findHere (others [found.value]);
			} else if (args.indexOf (found.value) !== -1)
				return found;
		}

		return null;
	}