# todo
	* classes
		V arguments to exclusions list
		V classes extends
		V initialization order
		V static classes
		V private and protected variables
		V static variables
		V initialization statement
		V 'super' requested in constuctors
		V check for changing of static field of parent class
		V names fix
		V 'this' support
		V renaming private and protected variables
		V abstract classes
		V short syntax
		V binded functions fixed 
			/*
				private example (){
					$ ('body')
					.on ('click', click)
					.off ('click', click);
				}
				
				private click (event){ ... }
			*/
		V static private and object locked conflict
		V function expression without args
		V new operator instead of 'in'
		V fix 'this.privatefield' access
		V convert member expression for static private to identifier
		V add check if static method is processing to processsuperexpression
		V "super;" => "ParentClass.prototype.method.apply (this, arguments)"
		V add access like 'other.privateMethod'
		V default arguments to constuctor
		V improve search for 'super' in contructor
		V fix bug with 'super'
		C if default fields initializations
		- throw error if 'return' found in contructor
		- partial classes
		- change abstract members to java-style
		- not use functionexpression unnecessarily
		- classes from other files for 'extends' or 'implement' (instead of 'implemented' take data from others ".jsxo"; see "caching")
		L interfaces
		L inner classes
		L anonymous classes
		? creating new instance with something like constructor (depends on realization of anonymous classes)
			/*
				var value = 'something',
					instance = new ObjectClassWithProtectedFieldContentAndPublicMethodIncreaseSize (){
						content = value;
						for (var i = 0; i < 10; i ++)
							increaseSize ();
					};
			*/
		? getters and setters
		? kind of multiple inheritance
		? initialize class only when first access (getters needed)
		? private methods to variables
		. support for access like "['field' + name]"
		. implementeds
			. implementeds generator
			. set marks for already existings helpers
				. with cool macros

	* macros
		V macros as macros arguments
		V macros arguments
		V source code as macros arguments
			V crazy source code support
		V macros in macros result
		V one macro can call another
		V macros asynchronous
		V macros à la functions syntax
			V one-line
			V blocks
			L default arguments values
		V fix strange numbers
		V add types to arguments
		V add types to macro's result
		V liteparser: regexp support
		V arguments with callback bug
		V anonynous macros
		V macros definion in macros
		- fix macro parsing errors (filename, linenumber, etc.)
		- macros order
		- instruction for get how many characters are argument
			/*
				@macro python:raw-nm (code:raw){

				}

				@python:file

				// and the whole file will be used as argument for macro
			*/
		? parsing with awesome parser

	* parser and generator
		V notimplemented operator
		V strings format
		V fix lambdas
		V array initializer operator
			V with helper function
		V search for expressions that would be worth to remove by prototype methods
			/*
				before:
					[].forEach.call (data, fn);
				after:
					Array.prototype.call (data, fn);
			*/
		V new generator 
			V with line number comments support
		V fix "object [(condition ? 'true' : 'false')]" priorities and check others
		V optimize for "string = '%0%1' ('', '');"
		V check "[ from .. to ]" (with variables)
		V one-line functions with automatically return insert
			? 'switch' support
		V functions without arguments
			- remove it
		V replace "\r" and other shit from source files
		F convert "[ 'a' .. 'c' ]" to "[ 'a', 'b', 'c' ]"
		C parsing of regular expressions like "/=something/"
		- replace one-type-literal by multiple literals with raw data
			- stringliteral
			- numericliteral
			- regexpliteral
			- booleanliteral
			- nullliteral
		- save chars like "\u2020" in string literals
		- not convert octal and hex number literals to decimal ones
		- new 'for-in-object' loop
			/*
				before:
					for (var key, value in-object object)
						console.log (key, value);
				after:
					for (var key in object)
						if (object.hasOwnProperty (key)){
							var value = object [key];
							console.log (key, value);
						}
			*/
		- 'enum'
		- 'const'
		- syntax like "function name (){ ... }()"
		- retrieve multiline strings support
			- skiping of spaces
		- something like uniqueidentifier
		- optional compression
			- convert multiline strings to regular ones
			- 'undefined' => 'void' 0
			- identifiers
				- replace local
				? replace global
				? replace properties
		? "for (var i, obj in-array array) console.log (i, obj);" => "for (var i, obj; obj = array [i], i < array.length; i ++) console.log (i, obj);"
		? for compatible with regular js disable detection of new keywords if they are using, but using wrong
			/*
				var lambda = 'value';
			*/
		? 'try' or 'switch' as expressions
		? arrow functions (binded to 'this' by default)
		? unicode characters like analog for keywords and punctuators
			? support for unicode in identifiers
			? 'Λ' or 'λ' instead of 'lambda'
			? 'Ƒ' of 'ƒ' instead of 'function'
			? '×' instead of '*'
			? '→' instead of '=>' (if there will be arrow functions)
			? '←' instead of 'return'
		? comments and linebreaks to regexps

	* other
		- getters and setters for objects
		- replace names of helpers by nice and long ones
		- params:
			- target
			- debug mode
			- disable warnings
		L rewrite js-ext in updated js-ext
		? ie8 compilation mode
		? uglifyjs
		? something like junit
		. override js-ext functions
			. override functions of js-ext parser (add new or change existing elements from macros and stuff)
		. instuctions to parser or something in comments (developer will generate them with macros)
			. macro for override instruction

	* application
		V including
		V saving result and stuff
		F import with dot in name
		F import folders
		- caching
			- ".jsxo" next to ".jsx"
				- use data from others ".jsxo"
			- available for macros
			- for files without macros
			- for files without macro calls
			- global function for check if file updated
			. for everything
		L impove errors handling
		L command line arguments
		L tests
		? version for browsers

	* static analyzer (warnings)
		- existing everythere
			- assignment in conditional expression without additional brackets around
			- dead code
		- take something 20 from pvs-studio or others
			- two identical tests: "if (a === 'a' || a === 'a') ..."
			- looks like broken copy-paste: "if (a.left === 'left' && a.left === 'right')"
			- something like this: "if (a === '7' && a === '8')"
			- or this: "if (a || !a)"
		- types
			- type conversion: "var a:boolean = JSON.parse (string)" => "var a = !!JSON.parse (string)"
			- realtime type check (for debug mode)
				/*
					before:
						var a:String = fn ();

					after:
						function __tc (obj, classObj){
							if (!(obj instanceof classObj))
								throw new Error ('...');
							return obj;
						}

						var a = __tc (fn (), String);
				*/
			- automatic calculation
				- for return value or arguments of functions and methods
				- for statements
			? functions with same name but different sets of arguments
		- special for js
			- variable or argument already exists
			- variable or argument doesn't exists (in whole area of visibility, of course)
			- without "with"
			- two fields with same names in object
			- "in" instead of "hasOwnAttribute"
			- without ";" after "var"
			- access to "arguments.callee"
		- special for js-ext
			- assignment to const (without new js features)
			- arguments in arrow functions
			- access for private or protected members outside
			? operator in one-line array is missed: "var array = [ 'string' something ]"

	* opensource, support
		V update readme
		V fix syntax highlight: "options.filename = functionEntry.filename;"
		- sublime text
			V syntax highlight
			- folding for classes and macros
			- highlight for default values of function arguments
			? publish package
		L documentation
		L npm
			L push sublime text file with rules for syntax highlight and stuff on github
		? find some ide like eclipse and make it js-ext compatible
		? post to habrahabr :)

# what do these letters?
	* category
		/*
			in order of priority except the first one, it is at the top to maintain enthusiasm :3
		*/
		V done
		F fixme
		C check if it is broken
		- something to do
		L do it later
		? questionable
		. useless (but, maybe, one day...)
		X done, but removed after (and remains for history)

# what sort of file is this ".todo"?
	- i made a cool highlight plugin for sublime text
	- and with it .todo-files became cool
	- if you suddenly want to get it, just ask me
	- i pleased to share
